---
- hosts: localhost
  connection: local

  # vars_files:
  #   - "vars/params.yml"

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Debug
      debug:
        msg: "{{ avi_credentials }}"
      tags:
        - debug

    - name: Define vip data for AWS (Multi AZ)
      set_fact:
        vipAwsMultiAz: "{{ vipAwsMultiAz | default([]) + [{ 'vip_id': my_idx, 'auto_allocate_floating_ip': 'true', 'auto_allocate_ip': 'true', 'avi_allocated_fip': 'true', 'subnet': {'ipam_network_subnet': {'subnet_uuid': item.2, 'subnet': {'mask': item.1.split('/')[1], 'type': 'V4', 'addr': item.1.split('/')[0] }}}}] }}"
      loop: "{{ awsZones | zip(awsSubnetAviVsCidrs, awsSubnetAviVsIds) | list }}"
      loop_control:
        index_var: my_idx
      when:
        - aws is defined
        - awsZones is defined
        - awsSubnetAviVsCidrs is defined
        - awsSubnetAviVsIds is defined

    - name: Debug VIP data for AWS (Multi AZ)
      debug:
        msg: "{{ vipAwsMultiAz }}"
      when:
        - aws is defined
        - awsZones is defined
        - awsSubnetAviVsCidrs is defined
        - awsSubnetAviVsIds is defined
      tags:
        - debug

    - name: Define vip data for AWS (Single AZ)
      set_fact:
        vipAwsSingleAz: "{{ vipAwsSingleAz | default([]) + [{ 'vip_id': '0', 'auto_allocate_floating_ip': 'true', 'auto_allocate_ip': 'true', 'avi_allocated_fip': 'true', 'subnet': {'ipam_network_subnet': {'subnet_uuid': awsSubnetAviVsIds.1, 'subnet': {'mask': awsSubnetAviVsCidrs.0.split('/')[1], 'type': 'V4', 'addr': awsSubnetAviVsCidrs.0.split('/')[0] }}}}] }}"
      when:
        - aws is defined
        - awsZones is defined
        - awsSubnetAviVsCidrs is defined
        - awsSubnetAviVsIds is defined

    - name: Debug VIP data for AWS (Single AZ)
      debug:
        msg: "{{ vipAwsSingleAz }}"
      when:
        - aws is defined
        - awsZones is defined
        - awsSubnetAviVsCidrs is defined
        - awsSubnetAviVsIds is defined
      tags:
        - debug

    - name: Create vsvip for dns VS (AWS)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ item.cloud_ref | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0.fqdn | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip: "{{ vipAwsSingleAz }}"
      loop: "{{ avi_virtualservice.dns }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - avi_virtualservice.dns is defined
        - item.cloud_ref == "cloudAws"
      tags:
        - vsVip
        - vsDns
        - vs

    - name: Create vsvip for http VS (AWS)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ item.cloud_ref | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0.fqdn | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip: "{{ vipAwsMultiAz }}"
      loop: "{{ avi_virtualservice.http }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - avi_virtualservice.http is defined
        - item.cloud_ref == "cloudAws"
      tags:
        - vsvip
        - vsHttp
        - vs
