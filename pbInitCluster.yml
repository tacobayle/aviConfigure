---
- hosts: localhost
  gather_facts: no

  vars_files:
    - "vars/params.yml"

  vars:
    my_pass: []

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Set variable avi_credentials
      set_fact:
        avi_credentials: >
                          {'api_version': "{{ avi_version }}",
                           'controller': "{{ controllerPrivateIps.0 }}",
                           'password': "{{ avi_password }}",
                           'username': "{{ avi_username }}"}
      tags:
        - creds
      when:
        - avi_version is defined
        - controllerPrivateIps is defined
        - avi_password is defined
        - avi_username is defined

    - name: Debug variable avi_credentials
      debug:
        msg: "{{ avi_credentials }}"
      tags:
        - debug

    - name: Update user admin password
      avi_useraccount:
        controller: "{{ avi_credentials.controller }}"
        username: "{{ avi_credentials.username }}"
        password: "{{ avi_credentials.password }}"
        old_password: 58NFaGDJm(PJH0G
        api_version: "{{ avi_credentials.api_version }}"
      ignore_errors: yes
      tags:
        - creds
      when:
        - controller.environment != "AWS"

    - name: Setting up Random password for users
      set_fact:
        my_pass: "{{ my_pass  +  [ lookup('password', '/dev/null length=4 chars==letters') + '_' + lookup('password', '/dev/null length=4 chars==letters') | upper ] }}"
      loop: "{{ aviUser }}"
      loop_control:
        label: "Configuring {{ item.name }}"
      when:
        - aviUser is defined
      tags:
        - creds
        - password

    # - debug:
    #     msg: "{{ item.0.name }}-{{ item.1 }}"
    #   loop: "{{ aviUser|zip(my_pass)|list }}"
    #   when: my_pass is defined

    - name: user creation
      avi_user:
        avi_credentials: "{{ avi_credentials }}"
        name: "{{ item.0.name }}"
        obj_username: "{{ item.0.name }}"
        obj_password: "{{ item.1 }}"
        access: "{{ item.0.access }}"
        user_profile_ref: "{{ item.0.user_profile_ref }}"
        is_active: "{{ item.0.is_active }}"
        is_superuser: "{{ item.0.is_superuser }}"
        default_tenant_ref: "{{ item.0.default_tenant_ref }}"
      loop: "{{ aviUser|zip(my_pass)|list }}"
      loop_control:
        label: "Configuring {{ item.0.name }}"
      when:
        - aviUser is defined
      tags:
        - creds

    - name: Change Avi Credentials - with Ansible user
      set_fact:
        avi_credentials: >
                          {'api_version': "{{ avi_version }}",
                           'controller': "{{ controllerPrivateIps.0 }}",
                          'password': "{{ my_pass.0 }}",
                          'username': "{{ aviUser.0.name }}"}
      tags:
        - creds

    - name: Get main Cluster Information
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        http_method: get
        path: cluster
      register: clusterInfo
      tags:
        - cluster

    - name: Debug variable cluster uuid
      debug:
        msg: "{{ clusterInfo['obj'].uuid }}"
      tags:
        - debug

    - name: Configure Cluster object with ClusterIP - if cluster has been configured
      avi_cluster:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        nodes:
            - name: "{{ controllerPrivateIps.0 }}"
              ip:
                type: V4
                addr: "{{ controllerPrivateIps.0 }}"
            - name: "{{ controllerPrivateIps.1 }}"
              ip:
                type: V4
                addr: "{{ controllerPrivateIps.1 }}"
            - name: "{{ controllerPrivateIps.2 }}"
              ip:
                type: V4
                addr: "{{ controllerPrivateIps.2 }}"
        name: cluster-0-1
        uuid: "{{ clusterInfo['obj'].uuid }}"
        virtual_ip:
            addr: "{{ controller.floatingIp }}"
            type: V4
      when:
        - controller.count == 3
        - controller.floatingIp is defined
        - controller.environment == "VMWARE"
      tags:
        - cluster

    - name: sleep for 300 seconds and continue with play - if cluster has been configured
      wait_for: timeout=300
      when:
        - controller.count == 3
        - controller.floatingIp is defined
        - controller.environment == "VMWARE"
      tags:
        - cluster

    # - name: Avi credentials
    #   debug:
    #     msg: "{{ avi_credentials }}"
    #   tags:
    #     - creds

    - name: Wait for the Controller cluster to finish - if cluster has been configured
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        http_method: get
        timeout: 300
        path: cluster/status
      register: statusCluster
      ignore_errors: yes
      until:
        - statusCluster.obj.cluster_state.state == "CLUSTER_UP_HA_ACTIVE"
        - statusCluster.obj.node_states.0.state == "CLUSTER_ACTIVE"
        - statusCluster.obj.node_states.1.state == "CLUSTER_ACTIVE"
        - statusCluster.obj.node_states.2.state == "CLUSTER_ACTIVE"
      retries: 120
      delay: 10
      when:
        - controller.count == 3
        - controller.floatingIp is defined
        - controller.environment == "VMWARE"
      tags:
        - cluster

    - name: Configure Cluster without HA with Public Controller IP
      avi_cluster:
        avi_credentials: "{{ avi_credentials }}"
        nodes:
            - name: "{{ controllerPrivateIps.0 }}"
              ip:
                type: V4
                addr: "{{ controllerPrivateIps.0 }}"
              public_ip_or_name:
                addr: "{{ controllerPublicIps.0 }}"
                type: V4
        name: cluster-0-1
        uuid: "{{ clusterInfo['obj'].uuid }}"
      when:
        - controller.enablePublicIP is defined
      tags:
        - cluster

    - name: sleep for 180 seconds and continue with play - if Public Controller IP has been configured
      wait_for: timeout=180
      when:
        - controller.enablePublicIP is defined
      tags:
        - cluster

    - name: Wait for the Controller cluster to be up - if Public Controller IP has been configured
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        http_method: get
        timeout: 300
        path: cluster/runtime
      register: statusCluster
      ignore_errors: yes
      until:
        - statusCluster.obj.cluster_state.state == "CLUSTER_UP_NO_HA" or statusCluster.obj.cluster_state.state == "CLUSTER_UP_HA_ACTIVE"
      retries: 120
      delay: 10
      when:
        - controller.enablePublicIP is defined
      tags:
        - cluster

    - name: Change Avi Credentials if cluster config has been done - with floating cluster IP - if cluster has been configured
      set_fact:
        avi_credentials: >
                          {'api_version': "{{ avi_version }}",
                           'controller': "{{ controller.floatingIp }}",
                           'password': "{{ my_pass.0 }}",
                           'username': "{{ aviUser.0.name }}"}
      when:
        - controller.count == 3
        - controller.floatingIp is defined
        - controller.environment == "VMWARE"
      tags:
        - cluster

    - name: save json creds
      copy:
        content: '{"avi_credentials": {{ avi_credentials }} }'
        dest: "{{ controller.aviCredsJsonFile | default('~/ansible/vars/creds.json') }}"
      tags:
        - creds
