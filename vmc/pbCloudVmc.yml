---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Create Avi DNS provider Without donain names - VMC
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ vmc.dns_provider_ref | default('dns-avi-vmc')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      when:
        - vmc.domains is defined
      tags:
        - dns

    - name: Update Avi DNS provider With donain names - VMC
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op: add
        avi_api_update_method: patch
        internal_profile:
          dns_service_domain:
            - domain_name: "{{ item.name }}"
              num_dns_ip: 1
              pass_through: true
              record_ttl: 100
          ttl: 300
        name: "{{ vmc.dns_provider_ref | default('dns-avi-vmc')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      loop: "{{ vmc.domains }}"
      when:
        - vmc.domains is defined
      tags:
        - dns

    - name: Configure Avi Cloud without IPAM - VMC
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ vmc.name }}"
        vtype: CLOUD_NONE
        apic_mode: false
        dhcp_enabled: "{{ no_access.dhcp_enabled | default('true') }}"
        mtu: 1500
        prefer_static_routes: false
        enable_vip_static_routes: false
        license_type: LIC_CORES
        state_based_dns_registration: "{{ vmc.state_based_dns_registration | default('false') }}"
        ip6_autocfg_enabled: "{{ vmc.ip6_autocfg_enabled | default('false') }}"
        dns_resolution_on_se: false
        enable_vip_on_all_interfaces: false
        license_tier: ENTERPRISE
        autoscale_polling_interval: 60
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ vmc.dns_provider_ref | default('dns-avi-vmc') }}"
      register: output_cloud_vmc
      tags:
        - cloud
      when:
        - vmc.name is defined

    - set_fact:
        cloud_vmc_uuid: "{{ output_cloud_vmc.obj.uuid }}"
      when:
        - vmc.name is defined
      tags:
        - cloud

    - name: Define Network Range IP Begin - VMC
      set_fact:
        ipBegin: "{{ vmc.network_vip.cidr | ipaddr(vmc.network_vip.ipStartPool) }}"
      when:
        - vmc.network_vip.cidr is defined
        - vmc.network_vip.ipStartPool is defined

    - name: Define Network Range IP Begin - VMC
      set_fact:
        ipBegin: "{{ ipBegin.split('/')[0] }}"
      when:
        - vmc.network_vip.cidr is defined
        - vmc.network_vip.ipStartPool is defined

    - name: Define Network Range IP End - VMC
      set_fact:
        ipEnd: "{{ vmc.network_vip.cidr | ipaddr(vmc.network_vip.ipEndPool) }}"
      when:
        - vmc.network_vip.cidr is defined
        - vmc.network_vip.ipEndPool is defined

    - name: Define Network Range IP End - VMC
      set_fact:
        ipEnd: "{{ ipEnd.split('/')[0] }}"
      when:
        - vmc.network_vip.cidr is defined
        - vmc.network_vip.ipEndPool is defined

    - name: Define configured_subnets for network - VMC
      set_fact:
        configured_subnets:
          - prefix:
              mask: "{{ vmc.network_vip.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ vmc.network_vip.type | default('V4') }}"
                addr: "{{ vmc.network_vip.cidr.split('/')[0] }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ vmc.network_vip.type | default('V4') }}"
                    addr: "{{ ipBegin }}"
                  end:
                    type: "{{ vmc.network_vip.type | default('V4') }}"
                    addr: "{{ ipEnd }}"
      when:
        - ipBegin is defined
        - ipEnd is defined
        - vmc.network_vip.cidr is defined

    - name: Create Network for IPAM - VMC
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ network.name | default('net-avi')}}"
        cloud_ref: "/api/cloud/?name={{ vmc.name }}"
        configured_subnets: "{{ configured_subnets }}"
        dhcp_enabled: "{{ network.dhcp_enabled | default('false')}}"
      register: output_network_vip_vmc
      when:
        - vmc.name is defined
      tags:
        - ipam

    - name: Create Avi IPAM - VMC
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        internal_profile:
          usable_networks:
            - nw_ref: "/api/network/{{ output_network_vip_vmc.obj.uuid }}"
        name: "{{ vmc.ipam_provider_ref | default('ipam-avi-vmc') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - output_network_vip_vmc.obj.uuid is defined
      tags:
        - ipam

    - name: Update Avi Cloud with IPAM - VMC
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ vmc.name }}"
        vtype: CLOUD_NONE
        apic_mode: false
        dhcp_enabled: "{{ no_access.dhcp_enabled | default('true') }}"
        mtu: 1500
        prefer_static_routes: false
        enable_vip_static_routes: false
        license_type: LIC_CORES
        state_based_dns_registration: "{{ vmc.state_based_dns_registration | default('false') }}"
        ip6_autocfg_enabled: "{{ vmc.ip6_autocfg_enabled | default('false') }}"
        dns_resolution_on_se: false
        enable_vip_on_all_interfaces: false
        license_tier: ENTERPRISE
        autoscale_polling_interval: 60
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ vmc.ipam_provider_ref | default('ipam-avi-vmc') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ vmc.dns_provider_ref | default('dns-avi-vmc') }}"
      register: output_cloud_vmc
      tags:
        - cloud
      when:
        - vmc.name is defined

    - name: Update vrf global with default route for VIP network - VMC
      avi_vrfcontext:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        cloud_ref: "/api/cloud/?name={{ vmc.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: global
        static_routes:
          - prefix:
              ip_addr:
                addr: "0.0.0.0"
                type: "{{ vmc.network_vip.type | default('V4') }}"
              mask: "0"
            next_hop:
              addr: "{{ vmc.network_vip.cidr | ipaddr(vmc.network_vip.defaultGateway) }}"
              type: "{{ vmc.network_vip.type | default('V4') }}"
            route_id: "1"
      when:
        - vmc.name is defined
        - vmc.network_vip.cidr
        - vmc.network_vip.defaultGateway
      tags:
        - vrf
        - route

    - name: Modify/Creating SE group - VMC
      avi_serviceenginegroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vmc.name }}"
        avi_api_update_method: put
        name: "{{ item.name }}"
        ha_mode: "{{ item.ha_mode | default('HA_MODE_SHARED') }}"
        min_scaleout_per_vs: "{{ item.min_scaleout_per_vs | default(omit) }}"
        buffer_se: "{{ item.buffer_se | default(omit) }}"
        extra_shared_config_memory: "{{ item.extra_shared_config_memory | default(omit) }}"
        vcenter_folder: "{{ item.vcenter_folder | default(omit) }}"
        vcpus_per_se: "{{ item.vcpus_per_se | default(omit) }}"
        memory_per_se: "{{ item.memory_per_se | default(omit) }}"
        disk_per_se: "{{ item.disk_per_se | default(omit) }}"
        realtime_se_metrics: "{{ item.realtime_se_metrics | default(omit) }}"
        auto_rebalance: "{{ item.auto_rebalance | default(omit) }}"
        auto_rebalance_interval: "{{ item.auto_rebalance_interval | default(omit) }}"
        auto_rebalance_criteria: "{{ item.auto_rebalance_criteria | default(omit) }}"
        instance_flavor: "{{ item.instance_flavor | default(omit) }}"
        accelerated_networking: "{{ item.accelerated_networking | default(omit) }}"
      loop: "{{ vmc.serviceEngineGroup }}"
      loop_control:
        label: "Modifying SE group called {{ item.name }}"
      when:
        - vmc.name is defined
        - vmc.serviceEngineGroup is defined
      tags:
        - serviceEngineGroup

    - add_host:
        hostname: avicontroller
        ansible_host: "{{ avi_credentials.controller }}"
        ansible_port: 22
        ansible_user: "{{ controller.username }}"
        ansible_ssh_pass: "{{ controller.password }}"

    #### start of block

    - block:
        - name: Retrieve Avi Version Info
          avi_api_session:
            avi_credentials: "{{ avi_credentials | default(omit) }}"
            api_context: "{{ avi_api_context | default(omit) }}"
            http_method: get
            path: cluster/runtime
            params:
          register: cluster_results
          delegate_to: "localhost"

        - set_fact:
            se_master_ctl_version: "{{ cluster_results.obj.node_info.version.split('(')[0] }}"


        - name: Avi SE | Image deploy | Set SE image path for controller version < 18.2.6
          set_fact:
            se_image_path: "/opt/avi/se_ova"
          when:
            - se_master_ctl_version < "18.2.6"

      when:
        - no_access is defined

    #### end of block

    #### start of block

    - block:
        - name: Retrieve Avi Version Info
          avi_api_session:
            avi_credentials: "{{ avi_credentials | default(omit) }}"
            api_context: "{{ avi_api_context | default(omit) }}"
            http_method: get
            path: "initial-data"
          register: data_res
          delegate_to: "localhost"

        - set_fact:
            se_master_ctl_version: "{{ cluster_results.obj.node_info.version.split('(')[0] }}"

        - name: Avi SE | Image deploy | Set SE image path for controller version >= 18.2.6
          set_fact:
            se_image_path: "/host/pkgs/{{ data_res.obj.version.Tag }}"
          when:
            - se_master_ctl_version >= "18.2.6"

      when:
        - no_access is defined

    #### end of block

    - name:  Generate SE image on controller
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: post
        path: 'fileservice/seova'
        timeout: 600
        data:
          file_format: ova
      delegate_to: localhost
      when:
        - vmc.name is defined

- hosts: avicontroller
  gather_facts: no

  tasks:

    - set_fact:
        se_image_path: "{{ hostvars['localhost']['se_image_path'] }}"

    - name: Download SE image
      fetch:
        src: "{{ se_image_path }}/se.ova"
        dest: ./
        flat: yes
        validate_checksum: False
      when:
        - vmc.name is defined

    - name: Define ova path (in controller variable)
      set_fact:
        ova_path: "./se.ova"
      when:
        - vmc.name is defined


- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Define ova path (in localhost variable)
      set_fact:
        ova_path: "{{ hostvars['avicontroller']['ova_path'] }}"
      when:
        - vmc.name is defined

    #     - name: debugging Start of the python script
    #       debug:
    #         msg: python3 python/loopOverSeGroup.py pbSeCreation.yml ~/ansible/vars/fromTerraform.yml ~/ansible/vars/fromTfServiceEngineGroup.json "{{ avi_credentials | to_json }}" "{{ cloud_uuid_no_access | to_json }}" "{{ ova_path | to_json }}"
    #       when:
    #         - no_access is defined

    - name: Run a playbook against SE group (SE Creation and SE Group Assignement) - this takes several minutes
      command: python3 python/loopOverSeGroup.py vmc/pbSeCreation.yml "{{ avi_credentials | to_json }}" "{{ cloud_vmc_uuid | to_json }}" "{{ ova_path | to_json }}" "{{ vmc_vsphere_user | to_json }}" "{{ vmc_vsphere_password | to_json }}" "{{ vmc_vsphere_server | to_json }}" "{{ vmc | to_json }}" "{{ vmc | string }}"
      register: logPbSeCreation
      when:
        - vmc.name is defined

    - name: debugging SE creation
      debug:
        msg: "{{ logPbSeCreation }}"
      when:
        - vmc.name is defined
