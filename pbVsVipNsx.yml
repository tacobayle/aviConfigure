---
- hosts: localhost
  connection: local

  # vars_files:
  #   - "vars/params.yml"

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Debug
      debug:
        msg: "{{ avi_credentials }}"
      tags:
        - debug

    - name: Create vsvip for dns VS (NSXT)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ item.cloud_ref | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        tier1_lr: "{{ avi_network_vip.tier1 | default(omit) }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(avi_network_vip.name) }}"
              subnet:
                mask: "{{ nsxtSegmentVip.cidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ avi_network_vip.type }}"
                  addr: "{{ nsxtSegmentVip.cidr.split('/')[0] }}"
      loop: "{{ avi_virtualservice.dns }}"
      when:
        - avi_virtualservice.http is defined
        - nsxt is defined
      tags:
        - vsvip
        - vs

    - name: Create vsvip for http VS (NSXT)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ item.cloud_ref | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        tier1_lr: "{{ avi_network_vip.tier1 | default(omit) }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(avi_network_vip.name) }}"
              subnet:
                mask: "{{ nsxtSegmentVip.cidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ avi_network_vip.type }}"
                  addr: "{{ nsxtSegmentVip.cidr.split('/')[0] }}"
      loop: "{{ avi_virtualservice.http }}"
      when:
        - avi_virtualservice.http is defined
        - nsxt is defined
      tags:
        - vsvip
        - vs
