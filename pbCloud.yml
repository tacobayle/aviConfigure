---
- hosts: localhost
  connection: local
  gather_facts: no

  vars:
    listNetworkUuid: []

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Create Avi DNS provider setting (for GCP, Vcenter, NSX-T, OpenStack or no Access)
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        internal_profile:
          dns_service_domain:
          - domain_name: "{{ domain.name }}"
            num_dns_ip: 1
            pass_through: true
            record_ttl: 100
          ttl: 300
        name: "{{ dns.name | default('dns-avi')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      when:
        - gcp is defined or vmw is defined or nsxt is defined or no_access is defined or openstack is defined
        - domain.name is defined
      tags:
        - dns

    - name: Create Avi IPAM (for GCP or no Access)
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ ipam.name | default('ipam-avi') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - network is defined
        - gcp is defined or no_access is defined
      tags:
        - ipam

    - name: Configure Avi Cloud for OpenStack
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ avi_cloud.name | default('cloudOpenStack') }}"
        vtype: CLOUD_OPENSTACK
        openstack_configuration: "{{ openstack }}"
      register: aviCloudOpenStack
      tags:
        - cloud
      when:
        - openstack is defined

    - name:  Define Cloud OpenStack uuid
      set_fact:
        cloud_uuid_openstack: "{{ aviCloudOpenStack.obj.uuid }}"
      when:
        - openstack is defined

    - name: Configure Avi Cloud for No Access
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ no_access.name }}"
        vtype: CLOUD_NONE
        apic_mode: false
        dhcp_enabled: "{{ no_access.dhcp_enabled | default('true') }}"
        mtu: 1500
        prefer_static_routes: false
        enable_vip_static_routes: false
        license_type: LIC_CORES
        state_based_dns_registration: "{{ no_access.state_based_dns_registration | default('false') }}"
        ip6_autocfg_enabled: "{{ no_access.ip6_autocfg_enabled | default('false') }}"
        dns_resolution_on_se: false
        enable_vip_on_all_interfaces: false
        license_tier: ENTERPRISE
        autoscale_polling_interval: 60
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ no_access.ipam_provider_ref | default('ipam-avi') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ no_access.dns_provider_ref | default('dns-avi') }}"
      register: aviCloudNoAccess
      tags:
        - cloud
      when:
        - no_access.name is defined

    - name:  Define Cloud no_access uuid
      set_fact:
        cloud_uuid_no_access: "{{ aviCloudNoAccess.obj.uuid }}"
      when:
        - no_access is defined
        - aviCloudNoAccess is defined

    - name: Update vrf global with default route for VIP network
      avi_vrfcontext:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        cloud_ref: "/api/cloud/?name={{ no_access.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: global
        static_routes:
          - prefix:
              ip_addr:
                addr: "0.0.0.0"
                type: "{{ network.type | default('V4') }}"
              mask: "0"
            next_hop:
              addr: "{{ network.defaultGateway }}"
              type: "{{ network.type | default('V4') }}"
            route_id: "1"
      when:
        - no_access is defined
        - network.defaultGateway is defined
      tags:
        - vrf
        - route


    - name: Configure Cloud for GCP
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ gcp.cloudName }}"
        vtype: CLOUD_GCP
        gcp_configuration:
          gcs_bucket_name: "{{ gcp.gcs_bucket_name }}"
          region_name: "{{ gcp.region_name }}"
          se_project_id: "{{ gcp.se_project_id }}"
          firewall_target_tags:
            - "{{ gcp.firewall_target_tags }}"
          network_config: "{{ gcp.network_config }}"
          zones: "{{ gcpZones }}"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ gcp.ipam_provider_ref | default('ipam-avi') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ gcp.dns_provider_ref | default('dns-avi') }}"
      register: aviCloudGcp
      when:
        - gcp is defined
        - gcpZones is defined
      tags:
        - cloud

    - name: Define Cloud GCP uuid
      set_fact:
        aviCloudGcpUuid: "{{ aviCloudGcp.obj.uuid }}"
      when:
        - gcp is defined
      tags:
        - cloud

    - name: Define Network Range IP Begin
      set_fact:
        ipBegin: "{{ network.cidr | ipaddr(network.ipStartPool) }}"
      when:
        - network.cidr is defined
        - network.ipStartPool is defined

    - name: Define Network Range IP Begin
      set_fact:
        ipBegin: "{{ ipBegin.split('/')[0] }}"
      when:
        - network.cidr is defined
        - network.ipStartPool is defined

    - name: Define Network Range IP End
      set_fact:
        ipEnd: "{{ network.cidr | ipaddr(network.ipEndPool) }}"
      when:
        - network.cidr is defined
        - network.ipEndPool is defined

    - name: Define Network Range IP End
      set_fact:
        ipEnd: "{{ ipEnd.split('/')[0] }}"
      when:
        - network.cidr is defined
        - network.ipEndPool is defined

    - name: Define configured_subnets for network
      set_fact:
        configured_subnets:
          - prefix:
              mask: "{{ network.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ network.type | default('V4') }}"
                addr: "{{ network.cidr.split('/')[0] }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ network.type | default('V4') }}"
                    addr: "{{ ipBegin }}"
                  end:
                    type: "{{ network.type | default('V4') }}"
                    addr: "{{ ipEnd }}"
      when:
        - ipBegin is defined
        - ipEnd is defined
        - network.cidr is defined

#    - name: Debug configured_subnets variable
#      debug:
#        msg: "{{ configured_subnets }}"
#      tags:
#        - debug
#      when:
#        - configured_subnets is defined

    - name: Create Network for IPAM
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ network.name | default('net-avi')}}"
        cloud_ref: "/api/cloud/?name={{ network.cloud_ref }}"
        configured_subnets: "{{ configured_subnets }}"
        dhcp_enabled: "{{ network.dhcp_enabled | default('false')}}"
      when:
        - network is defined
        - gcp is defined or no_access is defined
      tags:
        - ipam

    - name: get Networks to retrieve Uuid
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
      register: networkUuid
      when:
        - network is defined
        - gcp is defined or no_access is defined
      tags:
        - ipam

    - name: Append Network uuid to the list
      set_fact:
        listNetworkUuid: "{{ listNetworkUuid }} + [ '{{ item.uuid }}' ]"
      loop: "{{ networkUuid.obj.results }}"
      loop_control:
       label: "{{ item.uuid }}"
      when:
        - network is defined
        - gcp is defined or no_access is defined
      tags:
        - ipam

    - name: Update Avi IPAM
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        gcp_profile:
          usable_network_refs:
            - "/api/network/{{ listNetworkUuid.0 }}"
        name: "{{ ipam.name | default('ipam-avi') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - network is defined
        - gcp is defined or no_access is defined
      tags:
        - ipam

    - name: python workaround to retreive transport zone id
      command: python3 python/retrieveNsxtTransportZoneId.py ../vars/creds.json "{{ nsxt.server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxt.transportZone }}"
      ignore_errors: no
      register: nsxtTransportZoneId
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - nsxt.transportZone is defined
        - nsxt is defined

    - name: python workaround to retrieve tier1s for mgt
      command: python3 python/retrieveNsxtTier1s.py ../vars/creds.json "{{ nsxt.server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxt.tier1 }}"
      ignore_errors: no
      register: nsxtTier1sMgtJson
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - nsxt.tier1 is defined
        - nsxt is defined

    - set_fact:
        nsxtTier1sMgt: "{{ nsxtTier1sMgtJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - nsxt is defined

    - name: python workaround to  retrieve tier1s for avi vip
      command: python3 python/retrieveNsxtTier1s.py ../vars/creds.json "{{ nsxt.server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ avi_network_vip.tier1 }}"
      ignore_errors: no
      register: nsxtTier1sVipJson
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - avi_network_vip.tier1 is defined
        - nsxt is defined

    - set_fact:
        nsxtTier1sVip: "{{ nsxtTier1sVipJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - avi_network_vip.tier1 is defined
        - nsxt is defined

    - name: python workaround to retrieve segment details for avi management
      command: python3 python/retrieveNsxtSegment.py ../vars/creds.json "{{ nsxt.server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxtTransportZoneId.stdout }}" "{{ nsxt.network }}"
      ignore_errors: no
      register: nsxtSegmentMgtJson
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - nsxt.network is defined
        - nsxt is defined

    - set_fact:
        nsxtSegmentMgt: "{{ nsxtSegmentMgtJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - nsxt.network is defined
        - nsxt is defined

    - name: python workaround to retrieve segment details for avi vip
      command: python3 python/retrieveNsxtSegment.py ../vars/creds.json "{{ nsxt.server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxtTransportZoneId.stdout }}" "{{ avi_network_vip.name }}"
      ignore_errors: no
      register: nsxtSegmentVipJson
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - avi_network_vip.name is defined
        - nsxt is defined

    - set_fact:
        nsxtSegmentVip: "{{ nsxtSegmentVipJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - avi_network_vip.name is defined
        - nsxt is defined

    - name: python workaround to retrieve segment details for avi backend network
      command: python3 python/retrieveNsxtSegment.py ../vars/creds.json "{{ nsxt.server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxtTransportZoneId.stdout }}" "{{ avi_network_backend.name }}"
      ignore_errors: no
      register: nsxtSegmentBacJson
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - avi_network_backend.name is defined
        - nsxt is defined

    - set_fact:
        nsxtSegmentBac: "{{ nsxtSegmentBacJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
        - debugnsxt
        - vs
      when:
        - avi_network_backend.name is defined
        - nsxt is defined

    - name: Configure Avi Cloud for NSXT
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: cloudNsx
        vtype: CLOUD_NSXT
        nsxt_configuration:
          nsxt_url: "{{ nsxt.server }}"
          transport_zone: "{{ nsxtTransportZoneId.stdout }}"
          # site_id: default
          # enforcementpoint_id: default
          # domain_id: default
          management_segment:
            tier1_lr_id: "{{ nsxtTier1sMgt.id }}"
            segment_id: "{{ nsxtSegmentMgt.id }}"
          tier1_segment_config:
            segment_config_mode: TIER1_SEGMENT_MANUAL
            manual:
              tier1_lrs:
              - tier1_lr_id: "{{ nsxtTier1sVip.id }}"
                segment_id: "{{ nsxtSegmentVip.id }}"
          #automate_dfw_rules: false
          nsxt_credentials_ref: "/api/cloudconnectoruser/{{ nsxtUserOutput.obj.uuid }}"
        dhcp_enabled: "{{ nsxt.dhcp_enabled }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ nsxt.dns_provider_ref | default('dns-avi') }}"
        obj_name_prefix: "{{ nsxt.obj_name_prefix | default('AVINSXT') }}"
      register: aviCloudOutput
      when:
        - nsxt is defined
      tags:
        - cloud
        - debugnsxt

    - pause:
        minutes: 1
      when:
        - nsxt is defined
      tags:
        - cloud
        - debugnsxt

#    - name: python workaround to retrieve vcenter content library info
#      command: python3 python/retrieveNsxtVcentersLibrary.py ../vars/creds.json "{{ vcenter.server }}" "{{ vcenterUserOutput.obj.uuid }}" "{{ nsxt.vcenterContentLibrary }}"
#      ignore_errors: no
#      register: vcenterContentLibraryJson
#      tags:
#        - cloud
#        - nsxtApi
#        - debugnsxt
#      when:
#        - nsxt.vcenterContentLibrary is defined
#        - nsxt is defined

#    - set_fact:
#        vcenterContentLibrary: "{{ vcenterContentLibraryJson.stdout | from_json }}"
#      tags:
#        - cloud
#        - nsxtApi
#        - debugnsxt
#      when:
#        - nsxt.vcenterContentLibrary is defined
#        - nsxt is defined

    - name: Configure Vcenter Server for NSXT cloud
      avi_vcenterserver:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: vcenterserverOne
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        vcenter_url: "{{ vcenter.server }}"
        content_lib:
          id: "{{ nsxt.vcenterContentLibraryId }}"
        vcenter_credentials_ref: "/api/cloudconnectoruser/{{ vcenterUserOutput.obj.uuid }}"
      tags:
        - cloud
        - vcenterserver
        - debugnsxt
      when:
        - vcenter.server is defined
        - nsxt is defined

    - pause:
        minutes: 1
      when:
        - nsxt is defined
      tags:
        - cloud
        - debugnsxt

    - name: Configure Avi Cloud for Vcenter
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name:  "{{ vmw.name }}"
        vtype: CLOUD_VCENTER
        vcenter_configuration: "{{ vmw.vcenter_configuration }}"
        dhcp_enabled: "{{ vmw.dhcp_enabled }}"
      register: aviCloudOutput
      when:
        - vmw is defined
      tags:
        - cloud

    - pause:
        minutes: 1
      when:
        - vmw is defined
      tags:
        - cloud
        - debugnsxt

    - name: get Network details
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput
      tags:
        - cloud
        - network
        - ipamdns
        - debugnsxt
      when:
        - vmw is defined or nsxt is defined

    - name: Retrieve Network Mgt Uuid
      set_fact:
        networkMgtUuid: "{{ item.uuid }}"
      loop: "{{ networkOutput.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      tags:
        - cloud
        - network
        - ipamdns
        - debugnsxt
      when:
        - nsxt is defined
        - item.name == nsxt.network

    - name: Set IP details of Mgt Network
      set_fact:
        nsxtSegmentMgtSubnet:
          - prefix:
              mask: "{{ nsxtSegmentMgt.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ nsxt.networkType }}"
                addr: "{{ nsxtSegmentMgt.cidr.split('/')[0] }}"
            static_ranges:
              - begin:
                  type: "{{ nsxt.networkType }}"
                  addr: "{{ nsxtSegmentMgt.cidr.split('/')[0].split('.')[0] }}.{{ nsxtSegmentMgt.cidr.split('/')[0].split('.')[1] }}.{{ nsxtSegmentMgt.cidr.split('/')[0].split('.')[2] }}.{{ nsxt.networkRangeBegin }}"
                end:
                  type: "{{ nsxt.networkType }}"
                  addr: "{{ nsxtSegmentMgt.cidr.split('/')[0].split('.')[0] }}.{{ nsxtSegmentMgt.cidr.split('/')[0].split('.')[1] }}.{{ nsxtSegmentMgt.cidr.split('/')[0].split('.')[2] }}.{{ nsxt.networkRangeEnd }}"
      tags:
        - cloud
        - network
        - ipamdns
        - debugnsxt
      when:
        - nsxt is defined

    - name: Update Mgmt Network (for Vmware)
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vmw.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        uuid: "{{ networkMgtUuid | default(omit) }}"
        name: "{{ vmw.network }}"
        dhcp_enabled: "{{ vmw.networkDhcpEnabled | default(omit) }}"
        exclude_discovered_subnets: "{{ vmw.networkExcludeDiscoveredSubnets | default(omit) }}"
        vcenter_dvs: "{{ vmw.networkVcenterDvs | default(omit) }}"
        configured_subnets: "{{ nsxtSegmentMgtSubnet | default(omit) }}"
      when:
        - vmw.network is defined
        - vmw is defined
      tags:
        - cloud
        - network
        - ipamdns

    - name: Update Mgmt Network (for NSXT)
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        uuid: "{{ networkMgtUuid | default(omit) }}"
        name: "{{ nsxt.network }}"
        dhcp_enabled: "{{ nsxt.networkDhcpEnabled | default(omit) }}"
        exclude_discovered_subnets: "{{ nsxt.networkExcludeDiscoveredSubnets | default(omit) }}"
        vcenter_dvs: "{{ nsxt.networkVcenterDvs | default(omit) }}"
        configured_subnets: "{{ nsxtSegmentMgtSubnet | default(omit) }}"
      when:
        - nsxt.network is defined
        - nsxt is defined
      tags:
        - cloud
        - network
        - ipamdns

    - name: get Network details
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput
      tags:
        - cloud
        - network
        - ipamdns
        - debugnsxt
      when:
        - vmw is defined or nsxt is defined

    - name: Retrieve Network Vip Uuid
      set_fact:
        networkVipUuid: "{{ item.uuid }}"
      loop: "{{ networkOutput.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      tags:
        - cloud
        - network
        - ipamdns
        - debugnsxt
      when:
        - nsxt is defined
        - item.name == avi_network_vip.name

    - name: Set IP details of Vip Network
      set_fact:
        nsxtSegmentVipSubnet:
          - prefix:
              mask: "{{ nsxtSegmentVip.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ avi_network_vip.type }}"
                addr: "{{ nsxtSegmentVip.cidr.split('/')[0] }}"
            static_ranges:
              - begin:
                  type: "{{ avi_network_vip.type }}"
                  addr: "{{ nsxtSegmentVip.cidr.split('/')[0].split('.')[0] }}.{{ nsxtSegmentVip.cidr.split('/')[0].split('.')[1] }}.{{ nsxtSegmentVip.cidr.split('/')[0].split('.')[2] }}.{{ avi_network_vip.networkRangeBegin }}"
                end:
                  type: "{{ avi_network_vip.type }}"
                  addr: "{{ nsxtSegmentVip.cidr.split('/')[0].split('.')[0] }}.{{ nsxtSegmentVip.cidr.split('/')[0].split('.')[1] }}.{{ nsxtSegmentVip.cidr.split('/')[0].split('.')[2] }}.{{ avi_network_vip.networkRangeEnd }}"
      tags:
        - cloud
        - network
        - ipamdns
        - debugnsxt
      when:
        - avi_network_vip is defined
        - nsxt is defined
        - nsxtSegmentVip is defined

    - name: set vrf Vip (NSXT)
      set_fact:
        vrfNsxt: "/api/vrfcontext/?name={{ avi_network_vip.tier1 }}"
      tags:
        - cloud
        - network
        - ipamdns
        - debugnsxt
      when:
        - nsxt is defined

    - name: Update Vip Network for NSXT
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        uuid: "{{ networkVipUuid | default(omit) }}"
        name: "{{ avi_network_vip.name }}"
        dhcp_enabled: "{{ avi_network_vip.dhcp_enabled | default(omit) }}"
        exclude_discovered_subnets: "{{ avi_network_vip.exclude_discovered_subnets | default(omit) }}"
        vcenter_dvs: "{{ avi_network_vip.vcenter_dvs | default(omit) }}"
        configured_subnets: "{{ nsxtSegmentVipSubnet | default(omit) }}"
        vrf_context_ref: "{{ vrfNsxt | default(omit) }}"
      register: networkOutput
      when:
        - avi_network_vip is defined
        - nsxt is defined
      tags:
        - cloud
        - network
        - ipamdns
        - debugnsxt

    - name: Define subnet variable for vip network
      set_fact:
        vipConfigured_subnets:
          - prefix:
              mask: "{{ avi_network_vip.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ avi_network_vip.type }}"
                addr: "{{ avi_network_vip.cidr.split('/')[0] }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ avi_network_vip.type }}"
                    addr: "{{ avi_network_vip.cidr.split('/')[0].split('.')[0] }}.{{ avi_network_vip.cidr.split('/')[0].split('.')[1] }}.{{ avi_network_vip.cidr.split('/')[0].split('.')[2] }}.{{ avi_network_vip.begin }}"
                  end:
                    type: "{{ avi_network_vip.type }}"
                    addr: "{{ avi_network_vip.cidr.split('/')[0].split('.')[0] }}.{{ avi_network_vip.cidr.split('/')[0].split('.')[1] }}.{{ avi_network_vip.cidr.split('/')[0].split('.')[2] }}.{{ avi_network_vip.end }}"
      when:
        - avi_network_vip is defined
        - vmw is defined
      tags:
        - ipam


    - name: Update Vip Network for V-vcenter
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vmw.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ avi_network_vip.name }}"
        configured_subnets: "{{ vipConfigured_subnets }}"
        dhcp_enabled: "{{ avi_network_vip.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ avi_network_vip.exclude_discovered_subnets }}"
        vcenter_dvs: "{{ avi_network_vip.vcenter_dvs }}"
      register: networkOutput
      when:
        - avi_network_vip is defined
        - vmw is defined
      tags:
        - ipam

    - name: Define subnet variable for backend network
      set_fact:
        backendConfigured_subnets:
          - prefix:
              mask: "{{ avi_network_backend.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ avi_network_backend.type }}"
                addr: "{{ avi_network_backend.cidr.split('/')[0] }}"
      when:
        - avi_network_backend is defined
        - vmw is defined
      tags:
        - ipam

    - name: Update Network backend
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vmw.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ avi_network_backend.name }}"
        configured_subnets: "{{ backendConfigured_subnets }}"
        dhcp_enabled: "{{ avi_network_backend.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ avi_network_backend.exclude_discovered_subnets }}"
        vcenter_dvs: "{{ avi_network_backend.vcenter_dvs }}"
      when:
        - avi_network_backend is defined
        - vmw is defined
      tags:
        - ipam

    - name: Create Avi IPAM
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        internal_profile:
          usable_networks:
            - nw_ref: "/api/network/{{ networkOutput.obj.uuid | default(networkVipUuid) }}"
        name: "{{ ipam.name | default('ipam-avi') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - avi_network_vip is defined
        - vmw is defined or nsxt is defined
      tags:
        - ipam
        - debugnsxt

    - pause:
        minutes: 1
      when:
        - vmw is defined or nsxt is defined
      tags:
        - cloud
        - debugnsxt

    - name: Update vrf with default route for VIP network
      avi_vrfcontext:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ avi_network_vip.tier1 }}"
        static_routes:
          - prefix:
              ip_addr:
                addr: "0.0.0.0"
                type: "{{ avi_network_vip.type }}"
              mask: "0"
            next_hop:
              addr: "{{ nsxtSegmentVip.cidr.split('/')[0].split('.')[0] }}.{{ nsxtSegmentVip.cidr.split('/')[0].split('.')[1] }}.{{ nsxtSegmentVip.cidr.split('/')[0].split('.')[2] }}.{{ avi_network_vip.gwAddr }}"
              type: "{{ avi_network_vip.type }}"
            route_id: "1"
      when:
        - nsxt is defined
      tags:
        - cloud
        - debugnsxt

    - name: Update Avi Cloud for NSXT
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: cloudNsx
        vtype: CLOUD_NSXT
        nsxt_configuration:
          nsxt_url: "{{ nsxt.server }}"
          transport_zone: "{{ nsxtTransportZoneId.stdout }}"
          # site_id: default
          # enforcementpoint_id: default
          # domain_id: default
          management_segment:
            tier1_lr_id: "{{ nsxtTier1sMgt.id }}"
            segment_id: "{{ nsxtSegmentMgt.id }}"
          tier1_segment_config:
            segment_config_mode: TIER1_SEGMENT_MANUAL
            manual:
              tier1_lrs:
              - tier1_lr_id: "{{ nsxtTier1sVip.id }}"
                segment_id: "{{ nsxtSegmentVip.id }}"
          #automate_dfw_rules: false
          nsxt_credentials_ref: "/api/cloudconnectoruser/{{ nsxtUserOutput.obj.uuid }}"
        dhcp_enabled: "{{ nsxt.dhcp_enabled }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ nsxt.dns_provider_ref | default('dns-avi') }}"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ nsxt.ipam_provider_ref | default('ipam-avi') }}"
        se_group_template_ref: "/api/serviceenginegroup?name=Default-Group"
        obj_name_prefix: "{{ nsxt.obj_name_prefix | default('AVINSXT') }}"
      register: aviCloudOutput
      when:
        - nsxt is defined
      tags:
        - cloud
        - nsxt
        - debugnsxt

    - set_fact:
        aviCloudUuid: "{{ aviCloudOutput.obj.uuid }}"
      when:
        - nsxt is defined
      tags:
        - cloud

    - name: Update Avi Cloud (Vcenter)
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ vmw.name }}"
        vtype: CLOUD_VCENTER
        vcenter_configuration: "{{ vmw.vcenter_configuration }}"
        dhcp_enabled: "{{ vmw.dhcp_enabled }}"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ vmw.ipam_provider_ref | default('ipam-avi') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ vmw.dns_provider_ref | default('dns-avi') }}"
        se_group_template_ref: "/api/serviceenginegroup?name=Default-Group"
      register: aviCloudVmw
      when:
        - avi_network_vip is defined
        - vmw is defined
      tags:
        - cloud
        - ipam
        - dns

    - pause:
        minutes: 2
      when:
        - vmw is defined
      tags:
        - cloud
        - debugnsxt

    - set_fact:
        aviCloudVmwUuid: "{{ aviCloudVmw.obj.uuid }}"
      when:
        - vmw is defined
      tags:
        - cloud

    - name: Defining AWS Zones datas structure
      set_fact:
        zones: "{{ zones | default([]) + [{ 'availability_zone': item.0, 'mgmt_network_uuid': item.1, 'mgmt_network_name': item.2 }] }}"
      loop: "{{ awsZones | zip(awsSubnetSeMgtIds, awsSubnetSeMgtCidrs) | list }}"
      when:
        - aws is defined
        - awsZones is defined
        - awsSubnetSeMgtIds is defined
        - awsSubnetSeMgtCidrs is defined
      tags:
        - cloud

    - name: Debug
      debug:
        msg: "{{ zones }}"
      when:
        - aws is defined

    - name: Configure Avi Cloud for AWS (using IAM role or secret key)
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ aws.cloudName }}"
        vtype: CLOUD_AWS
        aws_configuration:
          use_iam_roles: "{{ aws.use_iam_roles | default('true') }}"
          secret_access_key: "{{ aws.secret_access_key | default(omit) }}"
          access_key_id: "{{ aws.access_key_id | default(omit) }}"
          region: "{{ aws.region }}"
          route53_integration: true
          asg_poll_interval: 60
          vpc_id: "{{ aws.vpc_id }}"
          zones: "{{ zones }}"
      register: aviCloudAws
      when:
        - aws is defined
      tags:
        - cloud

    - name: save avi Cloud Aws Uuid
      set_fact:
        aviCloudAwsUuid: "{{ aviCloudAws.obj.uuid }}"
      when:
        - aws is defined
      tags:
        - cloud

    - name: Defining Azure datas structure
      set_fact:
        network_info: "{{ network_info | default([]) + [{ 'se_network_id': item.se_network_id, 'virtual_network_id': item.virtual_network_id }] }}"
      loop: "{{ azureSubnets.mgt }}"
      when:
        - azure is defined
        - azureSubnets.mgt
      tags:
        - cloud

    - name: Debugging Azure datas structure
      debug:
        msg: "{{ network_info }}"
      when:
        - azure is defined
        - azureSubnets.mgt
      tags:
        - cloud
        - debug

    # network_info:
    #   - se_network_id: subnet1
    #     virtual_network_id: "/subscriptions/{{ azure.subscriptionId }}/resourceGroups/rg-avi/providers/Microsoft.Network/virtualNetworks/vnet-avi"

    - name: Configure Avi Cloud for Azure
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ azure.cloudName }}"
        vtype: CLOUD_AZURE
        azure_configuration:
          use_managed_disks: "{{ azure.use_managed_disks }}"
          resource_group: "{{ azure.resource_group }}"
          use_enhanced_ha: "{{ azure.use_enhanced_ha }}"
          use_azure_dns: "{{ azure.use_azure_dns }}"
          location: "{{ azure.location }}"
          subscription_id: "{{ azure.subscription_id }}"
          use_standard_alb: "{{ azure.use_standard_alb }}"
          network_info: "{{ network_info }}"
      register: aviCloudAzure
      when:
        - azure is defined
      tags:
        - cloud

    - name: save avi Cloud Azure Uuid
      set_fact:
        aviCloudAzureUuid: "{{ aviCloudAzure.obj.uuid }}"
      when:
        - azure is defined
      tags:
        - cloud

    - name: sleep for 180 seconds and continue with play (for Azure and OpenStack)
      wait_for: timeout=180
      when:
        - azure is defined or openstack is defined
      tags:
        - cloud

    - name: sleep for 120 seconds and continue with play
      wait_for: timeout=120
      when:
        - azure is defined or aws is defined or gcp is defined or nsxt is defined or vmw is defined or openstack is defined
      tags:
        - cloud

    - name: Wait for the cloud 0 to be ready // this is expected to fail for no_access
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: cloud-inventory
      register: cloudStatusResults
      until: 'cloudStatusResults.obj.results.0.status.se_image_state.0.state == "IMG_GEN_COMPLETE"'
      retries: 120
      delay: 10
      ignore_errors: yes

    - name: Wait for the cloud 1 to be ready // this is expected to fail for no_access
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: cloud-inventory
      register: cloudStatusResults
      until: 'cloudStatusResults.obj.results.1.status.se_image_state.0.state == "IMG_GEN_COMPLETE"'
      retries: 120
      delay: 10
      ignore_errors: yes

    - name: Wait for the cloud 2 to be ready // this is expected to fail for no_access
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: cloud-inventory
      register: cloudStatusResults
      until: 'cloudStatusResults.obj.results.2.status.se_image_state.0.state == "IMG_GEN_COMPLETE"'
      retries: 120
      delay: 10
      ignore_errors: yes
