---
- hosts: localhost
  connection: local
  gather_facts: no

  vars:
    listNetworkUuid: []

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Create Avi DNS provider Without donain names - NSXT
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ nsxt.dns_provider_ref | default('dns-avi-nsxt')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      when:
        - nsxt.domains is defined
      tags:
        - dns

    - name: Update Avi DNS provider With donain names - NSXT
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op: add
        avi_api_update_method: patch
        internal_profile:
          dns_service_domain:
            - domain_name: "{{ item.name }}"
              num_dns_ip: 1
              pass_through: true
              record_ttl: 100
          ttl: 300
        name: "{{ nsxt.dns_provider_ref | default('dns-avi-nsxt')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      loop: "{{ nsxt.domains }}"
      when:
        - nsxt.domains is defined
      tags:
        - dns

    - name: python workaround to retrieve transport zone id - NSXT
      command: python3 ../python/retrieveNsxtTransportZoneId.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxt.nsxt.transport_zone.name }}"
      ignore_errors: no
      register: nsxtTransportZoneId
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsxtUserOutput.obj.uuid is defined
        - nsxt.nsxt.transport_zone.name is defined

    - name: python workaround to retrieve tier1s for mgt - NSXT
      command: python3 ../python/retrieveNsxtTier1s.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxt.network_management.tier1 }}"
      ignore_errors: no
      register: nsxtTier1sMgtJson
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsxtUserOutput.obj.uuid is defined
        - nsxt.network_management.tier1 is defined

    - set_fact:
        nsxtTier1sMgt: "{{ nsxtTier1sMgtJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxtTier1sMgtJson.stdout is defined

    - name: python workaround to retrieve tier1s for avi vip - NSXT
      command: python3 ../python/retrieveNsxtTier1s.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ item.tier1 }}"
      ignore_errors: no
      loop: "{{ nsxt.networks_data }}"
      loop_control:
        label: "{{ item.name }}"
      register: nsxtTier1sVipJson
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsxtUserOutput.obj.uuid is defined
        - nsxt.networks_data is defined

    - set_fact:
        nsxtTier1sVip: "{{ nsxtTier1sVip | default([]) + [item.stdout | from_json] }}"
      loop: "{{ nsxtTier1sVipJson.results }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxtTier1sVipJson.results is defined

    - name: Debug
      debug:
        msg: "{{ nsxtTier1sVip }}"
      when:
        - nsxtTier1sVip is defined

    - name: python workaround to retrieve segment details for avi management - NSXT
      command: python3 ../python/retrieveNsxtSegment.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxtTransportZoneId.stdout }}" "{{ nsxt.network_management.name }}"
      ignore_errors: no
      register: nsxtSegmentMgtJson
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsxtUserOutput.obj.uuid is defined
        - nsxtTransportZoneId.stdout is defined
        - nsxt.network_management.name is defined

    - set_fact:
        nsxtSegmentMgt: "{{ nsxtSegmentMgtJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxtSegmentMgtJson.stdout is defined

    - name: python workaround to retrieve segment details for avi vip - NSXT
      command: python3 ../python/retrieveNsxtSegment.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxtTransportZoneId.stdout }}" "{{ item.name }}"
      ignore_errors: no
      loop: "{{ nsxt.networks_data }}"
      register: nsxtSegmentVipJson
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsxtUserOutput.obj.uuid is defined
        - nsxtTransportZoneId.stdout is defined
        - nsxt.networks_data is defined

    - name: Debug
      debug:
        msg: "{{ nsxtSegmentVipJson }}"

    - set_fact:
        nsxtSegmentVip: "{{ nsxtSegmentVip | default([]) + [item.stdout | from_json] }}"
      loop: "{{ nsxtSegmentVipJson.results }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxtSegmentVipJson.results is defined

    - name: Debug
      debug:
        msg: "{{ nsxtSegmentVip }}"
      when:
        - nsxtSegmentVip is defined


    - name: python workaround to retrieve segment details for backend network - NSXT
      command: python3 ../python/retrieveNsxtSegment.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsxtUserOutput.obj.uuid }}" "{{ nsxtTransportZoneId.stdout }}" "{{ nsxt.network_backend.name }}"
      ignore_errors: no
      register: nsxtSegmentBacJson
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsxtUserOutput.obj.uuid is defined
        - nsxtTransportZoneId.stdout is defined
        - nsxt.network_backend.name is defined

    - set_fact:
        nsxtSegmentBac: "{{ nsxtSegmentBacJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxtSegmentBacJson.stdout is defined

    - name: Defining tier1_lrs list
      set_fact:
        tier1_lrs: "{{ tier1_lrs | default([]) + [{ 'tier1_lr_id': item.0.id, 'segment_id': item.1.id }] }}"
      loop: "{{ nsxtTier1sVip | zip(nsxtSegmentVip) | list }}"
      when:
        - nsxtTier1sVip is defined
        - nsxtSegmentVip is defined

    - name: Debug
      debug:
        msg: "{{ tier1_lrs }}"
      when:
        - tier1_lrs is defined

    - name: Configure Avi Cloud - NSXT
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ nsxt.name}}"
        vtype: CLOUD_NSXT
        nsxt_configuration:
          nsxt_url: "{{ nsx_server }}"
          transport_zone: "{{ nsxtTransportZoneId.stdout }}"
          # site_id: default
          # enforcementpoint_id: default
          # domain_id: default
          management_segment:
            tier1_lr_id: "{{ nsxtTier1sMgt.id }}"
            segment_id: "{{ nsxtSegmentMgt.id }}"
          tier1_segment_config:
            segment_config_mode: TIER1_SEGMENT_MANUAL
            manual:
              tier1_lrs: "{{ tier1_lrs }}"
#                - tier1_lr_id: "{{ nsxtTier1sVip.id }}"
#                  segment_id: "{{ nsxtSegmentVip.id }}"
          #automate_dfw_rules: false
          nsxt_credentials_ref: "/api/cloudconnectoruser/{{ nsxtUserOutput.obj.uuid }}"
        dhcp_enabled: "{{ nsxt.dhcp_enabled }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ nsxt.dns_provider_ref | default('dns-avi-nsxt') }}"
        obj_name_prefix: "{{ nsxt.obj_name_prefix | default('AVINSXT') }}"
      register: output_cloud_nsxt
      when:
        - nsxt.name is defined
        - nsx_server is defined
        - nsxtTransportZoneId.stdout is defined
        - nsxtTier1sMgt.id is defined
        - nsxtSegmentMgt.id is defined
        - tier1_lrs is defined
        - nsxtUserOutput.obj.uuid is defined
        - nsxt.dhcp_enabled is defined
        - nsxt.network_management is defined
      tags:
        - cloud

    - set_fact:
        cloud_nsxt_uuid: "{{ output_cloud_nsxt.obj.uuid }}"
      when:
        - output_cloud_nsxt.obj.uuid is defined
      tags:
        - cloud

    - name: Debug
      debug:
        msg: "{{ cloud_nsxt_uuid }}"
      when:
        - cloud_nsxt_uuid is defined

    - pause:
        minutes: 1
      when:
        - nsxt is defined
      tags:
        - cloud

    - name: python workaround to retrieve vcenter content library info - NSXT
      command: python3 ../python/retrieveNsxtVcentersLibrary.py "{{ controller.aviCredsJsonFile }}" "{{ vsphere_server }}" "{{ vcenterUserOutput.obj.uuid }}" "{{ nsxt.vcenter.content_library.name }}"
      ignore_errors: no
      register: vcenterContentLibraryJson
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - vsphere_server is defined
        - vcenterUserOutput.obj.uuid is defined
        - nsxt.vcenter.content_library.name is defined

    - set_fact:
        vcenterContentLibrary: "{{ vcenterContentLibraryJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - vcenterContentLibraryJson.stdout is defined

    - name: Configure Vcenter Server for NSXT cloud - NSXT
      avi_vcenterserver:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ nsxt.vcenter.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        vcenter_url: "{{ vsphere_server }}"
        content_lib:
          id: "{{ vcenterContentLibrary.id }}"
        vcenter_credentials_ref: "/api/cloudconnectoruser/{{ vcenterUserOutput.obj.uuid }}"
      register: output_nsxt_vcenter
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt.vcenter.name is defined
        - nsxt.name is defined
        - vsphere_server is defined
        - vcenterContentLibrary.id is defined
        - vcenterUserOutput.obj.uuid is defined

    - set_fact:
        nsxt_vcenter_uuid: "{{ output_nsxt_vcenter.obj.uuid }}"
      when:
        - output_nsxt_vcenter.obj.uuid is defined
      tags:
        - cloud

    - pause:
        minutes: 1
      when:
        - nsxt is defined
      tags:
        - cloud

    - name: get Network details - NSXT
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt is defined

    - name: Retrieve Network Mgt Uuid - NSXT
      set_fact:
        networkMgtUuid: "{{ item.uuid }}"
      loop: "{{ networkOutput.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt is defined
        - item.name == nsxt.network_management.name

    - name: Set IP details of Mgmt Network - NSXT
      set_fact:
        configured_subnets_mgmt:
          - prefix:
              mask: "{{ nsxt.network_management.defaultGateway.split('/')[1] }}"
              ip_addr:
                type: "{{ nsxt.network_management.type | default('V4') }}"
                addr: "{{ nsxt.network_management.defaultGateway | ipv4('network') }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ nsxt.network_management.type | default('V4') }}"
                    addr: "{{ nsxt.network_management.defaultGateway | ipaddr(nsxt.network_management.ipStartPool) }}"
                  end:
                    type: "{{ nsxt.network_management.type | default('V4') }}"
                    addr: "{{ nsxt.network_management.defaultGateway | ipaddr(nsxt.network_management.ipEndPool) }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt.network_management.defaultGateway is defined
        - nsxt.network_management.ipStartPool is defined
        - nsxt.network_management.ipEndPool is defined

    - name: Update Mgmt Network - NSXT
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        uuid: "{{ networkMgtUuid | default(omit) }}"
        name: "{{ nsxt.network_management.name }}"
        dhcp_enabled: "{{ nsxt.network_management.dhcp_enabled | default(omit) }}"
        exclude_discovered_subnets: "{{ nsxt.network_management.exclude_discovered_subnets | default(omit) }}"
        vcenter_dvs: "{{ nsxt.network_management.vcenter_dvs | default(omit) }}"
        configured_subnets: "{{ configured_subnets_mgmt }}"
      when:
        - nsxt.name is defined
        - nsxt.network_management.name
        - configured_subnets_mgmt
      tags:
        - cloud

    - name: get Network details - NSXT
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt is defined

    - name: Retrieve Network Vip Uuid - NSXT
      set_fact:
        networkVipUuid: "{{ item.uuid }}"
      loop: "{{ networkOutput.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt is defined
        - item.name == nsxt.network_data.0.name

#    - name: Define Network Range IP Begin - NSXT
#      set_fact:
#        ipBegin: "{{ nsxt.networks_data.0.defaultGateway | ipaddr(nsxt.networks_data.0.ipStartPool) }}"
#      when:
#        - nsxt.networks_data.0.defaultGateway is defined
#        - nsxt.networks_data.0.ipStartPool is defined
#
#    - name: Define Network Range IP Begin - NSXT
#      set_fact:
#        ipBegin: "{{ ipBegin.split('/')[0] }}"
#      when:
#        - ipBegin is defined
#
#    - name: Define Network Range IP End - NSXT
#      set_fact:
#        ipEnd:  "{{ nsxt.networks_data.0.defaultGateway | ipaddr(nsxt.networks_data.0.ipEndPool) }}"
#      when:
#        - nsxt.networks_data.0.defaultGateway is defined
#        - nsxt.networks_data.0.ipEndPool is defined
#
#    - name: Define Network Range IP End - NSXT
#      set_fact:
#        ipEnd: "{{ ipEnd.split('/')[0] }}"
#      when:
#        - ipEnd is defined


    - name: Define configured_subnets for network - NSXT
      set_fact:
        configured_subnets:
          - prefix:
              mask: "{{ nsxt.networks_data.0.defaultGateway | ipv4('prefix') }}"
              ip_addr:
                type: "{{ nsxt.networks_data.0.type | default('V4') }}"
                addr: "{{ nsxt.networks_data.0.defaultGateway | ipv4('network') }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ nsxt.networks_data.0.type | default('V4') }}"
                    addr: "{{ nsxt.networks_data.0.defaultGateway | ipaddr(nsxt.network_management.ipStartPool) }}"
                  end:
                    type: "{{ nsxt.networks_data.0.type | default('V4') }}"
                    addr: "{{ nsxt.networks_data.0.defaultGateway | ipaddr(nsxt.network_management.ipEndPool) }}"
      when:
        - nsxt.networks_data.0.defaultGateway is defined
        - nsxt.network_management.ipStartPool is defined
        - nsxt.network_management.ipEndPool is defined

#
#
#
#    - name: Set IP details of Vip Network - NSXT
#      set_fact:
#        configured_subnets_vip:
#          - prefix:
#              mask: "{{ nsxt.networks_data.0.cidr.split('/')[1] }}"
#              ip_addr:
#                type: "{{ nsxt.networks_data.0.type | default('V4') }}"
#                addr: "{{ nsxt.networks_data.0.cidr.split('/')[0] }}"
#            static_ip_ranges:
#              - range:
#                  begin:
#                    type: "{{ nsxt.networks_data.0.type | default('V4') }}"
#                    addr: "{{ nsxtSegmentVip.0.cidr.split('/')[0].split('.')[0] }}.{{ nsxtSegmentVip.0.cidr.split('/')[0].split('.')[1] }}.{{ nsxtSegmentVip.0.cidr.split('/')[0].split('.')[2] }}.{{ nsxt.networks_data.0.ipStartPool }}"
#                  end:
#                    type: "{{ nsxt.networks_data.0.type | default('V4') }}"
#                    addr: "{{ nsxtSegmentVip.0.cidr.split('/')[0].split('.')[0] }}.{{ nsxtSegmentVip.0.cidr.split('/')[0].split('.')[1] }}.{{ nsxtSegmentVip.0.cidr.split('/')[0].split('.')[2] }}.{{ nsxt.networks_data.0.ipEndPool }}"
#      tags:
#        - cloud
#        - nsxtApi
#      when:
#        - networks_data is defined
#        - nsxt.network_vip.ipStartPool is defined
#        - nsxt.network_vip.ipEndPool is defined

#    - name: set vrf Vip - NSXT
#      set_fact:
#        vrfNsxt: "/api/vrfcontext/?name={{ nsxt.networks_data.0.tier1 }}"
#      tags:
#        - cloud
#        - nsxtApi
#      when:
#        - nsxt.network_vip.tier1 is defined

    - name: Update Vip Network - NSXT
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        uuid: "{{ networkVipUuid | default(omit) }}"
        name: "{{ nsxt.networks_data.0.name }}"
        dhcp_enabled: "{{  nsxt.networks_data.0.dhcp_enabled | default(omit) }}"
        exclude_discovered_subnets: "{{  nsxt.networks_data.0.exclude_discovered_subnets | default(omit) }}"
        vcenter_dvs: "{{  nsxt.networks_data.0.vcenter_dvs | default(omit) }}"
        configured_subnets: "{{ configured_subnets }}"
        vrf_context_ref: "/api/vrfcontext/?name={{ nsxt.networks_data.0.tier1 }}"
      register: networkOutput
      when:
        - nsxt.name is defined
        - nsxt.networks_data.0.name is defined
        - configured_subnets is defined
        - nsxt.networks_data.0.tier1 is defined
      tags:
        - cloud

    - name: Create Avi IPAM - NSXT
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        internal_profile:
          usable_networks:
            - nw_ref: "/api/network/{{ networkOutput.obj.uuid | default(networkVipUuid) }}"
        name: "{{ nsxt.ipam_provider_ref | default('ipam-avi-nsxt') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - networkOutput.obj.uuid is defined
      tags:
        - cloud

    - pause:
        minutes: 1
      when:
        - nsxt is defined
      tags:
        - cloud
        - nsxtApi

    - name: Update vrf with default route for VIP network - NSXT
      avi_vrfcontext:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ nsxt.networks_data.0.tier1 }}"
        static_routes:
          - prefix:
              ip_addr:
                addr: "0.0.0.0"
                type: "{{ nsxt.networks_data.0.type | default('V4') }}"
              mask: "0"
            next_hop:
              addr: "{{ nsxt.networks_data.0.defaultGateway | ipv4('address') }}"
              type: "{{ nsxt.networks_data.0.type | default('V4') }}"
            route_id: "1"
      when:
        - nsxt.name is defined
        - nsxt.networks_data.0.defaultGateway is defined
        - nsxt.networks_data.0.tier1 is defined
      tags:
        - cloud

    - name: Update Avi Cloud for NSXT
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ nsxt.name }}"
        vtype: CLOUD_NSXT
        nsxt_configuration:
          nsxt_url: "{{ nsxt.server }}"
          transport_zone: "{{ nsxtTransportZoneId.stdout }}"
          # site_id: default
          # enforcementpoint_id: default
          # domain_id: default
          management_segment:
            tier1_lr_id: "{{ nsxtTier1sMgt.id }}"
            segment_id: "{{ nsxtSegmentMgt.id }}"
          tier1_segment_config:
            segment_config_mode: TIER1_SEGMENT_MANUAL
            manual:
              tier1_lrs: "{{ tier1_lrs }}"
          #automate_dfw_rules: false
          nsxt_credentials_ref: "/api/cloudconnectoruser/{{ nsxtUserOutput.obj.uuid }}"
        dhcp_enabled: "{{ nsxt.dhcp_enabled }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ nsxt.dns_provider_ref | default('dns-avi-nsxt') }}"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ nsxt.ipam_provider_ref | default('ipam-avi-nsxt') }}"
        se_group_template_ref: "/api/serviceenginegroup?name=Default-Group"
        obj_name_prefix: "{{ nsxt.obj_name_prefix | default('AVINSXT') }}"
      when:
        - nsxt.name is defined
        - nsx_server is defined
        - nsxt.dhcp_enabled is defined
        - nsxt.network_management is defined
      tags:
        - cloud
        - nsxtApi

    - name: sleep for 120 seconds and continue with play
      wait_for: timeout=120
      when:
        - nsxt.name is defined
      tags:
        - cloud

    - name: Run a python script against a specific cloud - this takes several minutes
      command: python3 ../python/retrieveCloudStatus.py "{{ controller.aviCredsJsonFile }}" "{{ cloud_nsxt_uuid }}"
      register: logCloudStatus
      until: logCloudStatus.stdout == "IMG_GEN_COMPLETE"
      retries: 30
      delay: 120
      ignore_errors: yes
      when:
        - controller.aviCredsJsonFile is defined
        - cloud_nsxt_uuid is defined
      tags:
        - cloud

    - name: python workaround to retrieve folders uuid  - NSXT
      command: python3 ../python/retrieveNsxtVcenterFolders.py "{{ controller.aviCredsJsonFile }}" "{{ cloud_nsxt_uuid }}" "{{ nsxt_vcenter_uuid }}"
      ignore_errors: no
      register: vcenterFoldersJson
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - cloud_nsxt_uuid is defined
        - nsxt_vcenter_uuid is defined

    - set_fact:
        vcenterFolders: "{{ vcenterFoldersJson.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - vcenterFoldersJson.stdout is defined

    - name: Modify/Creating SE group - NSXT
      avi_serviceenginegroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        avi_api_update_method: put
        name: "{{ item.0.name }}"
        ha_mode: "{{ item.0.ha_mode | default('HA_MODE_SHARED') }}"
        min_scaleout_per_vs: "{{ item.0.min_scaleout_per_vs | default(omit) }}"
        max_scaleout_per_vs: "{{ item.0.max_scaleout_per_vs | default(omit) }}"
        max_cpu_usage: "{{ item.0.max_cpu_usage | default(omit) }}"
        min_cpu_usage: "{{ item.0.min_cpu_usage | default(omit) }}"
        vs_scaleout_timeout: "{{ item.0.vs_scaleout_timeout | default(omit) }}"
        buffer_se: "{{ item.0.buffer_se | default(omit) }}"
        vcenters:
          - vcenter_ref: "/api/vcenterserver?name={{ nsxt.vcenter.name }}"
            vcenter_folder: "{{ item.1.vc_mobj_id }}"
        extra_shared_config_memory: "{{ item.0.extra_shared_config_memory | default(omit) }}"
        vcpus_per_se: "{{ item.0.vcpus_per_se | default(omit) }}"
        memory_per_se: "{{ item.0.memory_per_se | default(omit) }}"
        disk_per_se: "{{ item.0.disk_per_se | default(omit) }}"
        realtime_se_metrics: "{{ item.0.realtime_se_metrics | default(omit) }}"
        auto_rebalance: "{{ item.0.auto_rebalance | default(omit) }}"
        auto_rebalance_interval: "{{ item.0.auto_rebalance_interval | default(omit) }}"
        auto_rebalance_criteria: "{{ item.0.auto_rebalance_criteria | default(omit) }}"
      loop: "{{ nsxt.vcenter.serviceEngineGroup | product(vcenterFolders)|list}}"
      loop_control:
        label: "Modifying/creating SE group called {{ item.0.name }}"
      when:
        - nsxt.name is defined
        - nsxt.vcenter.serviceEngineGroup is defined
        - vcenterFolders is defined
        - nsxt.vcenter.name is defined
        - item.0.vcenter_folder == item.1.name
      tags:
        - serviceEngineGroup