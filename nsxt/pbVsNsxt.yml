---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Get Clouds list
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: cloud
      register: cloudResults

    - name: retrieve cloud uuid
      set_fact:
        cloud_nsxt_uuid: "{{ item.uuid }}"
      tags:
        - cloud
        - nsxtApi
      loop: "{{ cloudResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.name == nsxt.name

    - name: Debug
      debug:
        msg: "{{ cloud_nsxt_uuid }}"
      when:
        - nsxt.name is defined

    - name: Debug
      debug:
        msg: "{{ avi_credentials }}"
      tags:
        - debug

    - name: Create vsvip for dns - NSXT
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        tier1_lr: "{{ nsxtTier1sVip.0.id }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + nsxt.domains.0.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ nsxt.networks_data.0.name }}"
              subnet:
                mask: "{{ nsxt.networks_data.0.ipamCidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ nsxt.networks_data.0.type | default('V4') }}"
                  addr: "{{ nsxt.networks_data.0.ipamCidr | ipv4('network') }}"
      loop: "{{ nsxt.virtualservices.dns }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - nsxt.virtualservices.dns is defined
        - nsxt.name is defined
        - nsxt.domains is defined
        - nsxt.networks_data.0.name is defined
        - nsxt.networks_data.0.ipamCidr is defined
      tags:
        - vsvip
        - vs

    - name: Create vsvip for http - NSXT
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        tier1_lr: "{{ nsxtTier1sVip.0.id }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + nsxt.domains.0.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ nsxt.networks_data.0.name }}"
              subnet:
                mask: "{{ nsxt.networks_data.0.ipamCidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ nsxt.networks_data.0.type | default('V4') }}"
                  addr: "{{ nsxt.networks_data.0.ipamCidr | ipv4('network') }}"
      loop: "{{ nsxt.virtualservices.http }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - nsxt.virtualservices.http is defined
        - nsxt.name is defined
        - nsxt.domains.0.name is defined
        - nsxt.networks_data.0.name is defined
        - nsxt.networks_data.0.ipamCidr is defined
      tags:
        - vsvip
        - vs

    - name: Create vsvip for http for NSXT Group - NSXT
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-nsxt-group-{{ my_idx }}-{{ item.1 }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        tier1_lr: "{{ nsxtTier1sVip.0.id }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default('vs-nsxt' + my_idx | string + '.' + nsxt.domains.0.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ nsxt.networks_data.0.name }}"
              subnet:
                mask: "{{ nsxt.networks_data.0.ipamCidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ nsxt.networks_data.0.type | default('V4') }}"
                  addr: "{{ nsxt.networks_data.0.ipamCidr | ipv4('network') }}"
      loop: "{{ nsxt.vcenters | product(nsxt.application_ports) | list }}"
      loop_control:
        index_var: my_idx
      when:
        - nsxt.name is defined
        - nsxt.vcenters is defined
        - nsxt.application_ports is defined
        - nsxtTier1sVip.0.id is defined
        - nsxt.domains.0.name is defined
        - nsxt.networks_data.0.name is defined
        - nsxt.networks_data.0.ipamCidr is defined
        - item.0.application == true
      tags:
        - vsvip
        - vs


      #
      # Pool creation
      #
      # - name: get Network details (ansible bug get/post related to nsxt object)
      #   avi_api_session:
      #     avi_credentials: "{{ avi_credentials }}"
      #     api_version: "{{ avi_credentials.api_version }}"
      #     http_method: post
      #     timeout: 300
      #     path: nsxt/groups
      #     data:
      #       cloud_uuid: "{{ aviCloudUuid }}"
      #     params:
      #       page_size: -1
      #   register: nsxtgroupsOutput
      # when:
      #   - avi_pool_nsxtGroup is defined
      #   - nsxt is defined
      # tags:
      #   - pool
      #   - vsHttp
      #   - vs


    #
    # NSXT workaround
    #

    - name: retrieve details for NSXT Group - NSXT
      command: python3 ../python/retrieveNsxtGroups.py "{{ controller.aviCredsJsonFile }}" "{{ cloud_nsxt_uuid }}" "{{ nsxt.nsxt_backend_prefix_group_name }}-{{ my_idx }}"
      ignore_errors: no
      loop: "{{ nsxt.vcenters }}"
      loop_control:
        index_var: my_idx
      register: nsxtGroupsJson
      when:
        - controller.aviCredsJsonFile is defined
        - nsxt.vcenters is defined
        - cloud_nsxt_uuid is defined
        - nsxt.nsxt_backend_prefix_group_name is defined
        - item.application == true
      tags:
        - pool
        - vs

    - name: NSXT Group - Saving Groups detail to variable
      set_fact:
        nsxtGroups: "{{ nsxtGroups | default([]) + [item.stdout | from_json] }}"
      loop: "{{ nsxtGroupsJson.results }}"
      when:
        - nsxtGroupsJson.results is defined

#    - name: save NsxT details for avi_pool_nsxtGroup
#      set_fact:
#        nsxtGroups: "{{ nsxtGroupsJson.stdout | from_json }}"
#      when:
#        - nsxtGroupsJson.stdout is defined
#      tags:
#        - pool
#        - vs

    - name: create pool based on NSXT group - NSXT
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "NSXT-Group-{{ my_idx }}-{{ item.1 }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ item.lb_algorithm | default('LB_ALGORITHM_ROUND_ROBIN') }}"
        tier1_lr: "{{ nsxtTier1sVip.0.id }}"
        nsx_securitygroup:
          - "{{ item.0.1.id }}"
        application_persistence_profile_ref: "/api/applicationpersistenceprofile?name={{ item.0.0.application_persistence_profile_ref | default('System-Persistence-Client-IP') }}"
        default_server_port: "{{ item.1 }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ item.health_monitor_refs | default('hm1') }}"
      loop: "{{ nsxt.vcenters | zip(nsxtGroups) | product(nsxt.application_ports) | list }}"
      loop_control:
        index_var: my_idx
      when:
        - nsxt.name is defined
        - nsxtTier1sVip.0.id is defined
        - nsxtGroups is defined
        - nsxt.application_ports is defined
        - item.0.0.application == true
      tags:
        - pool
        - vs

#    - name: Create pool without server (NSX-T)
#      avi_pool:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        name: "{{ nsxt.pool.name }}"
#        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
#        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
#        tier1_lr: "{{ nsxtTier1sVip.id }}"
#      when:
#        - nsxt.name is defined
#        - nsxt.pool.name is defined
#      tags:
#        - pool
#        - vs
#
#    - name: update pool with servers (NSXT)
#      avi_pool:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        avi_api_patch_op : add
#        avi_api_update_method: patch
#        name: "{{ nsxt.pool.name }}"
#        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
#        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
#        lb_algorithm: "{{ avi_pool.lb_algorithm | default('LB_ALGORITHM_ROUND_ROBIN') }}"
#        tier1_lr: "{{ nsxtTier1sVip.id }}"
#        health_monitor_refs:
#          - "/api/healthmonitor?name={{ avi_pool.health_monitor_refs | default('hm1') }}"
#        servers:
#          - ip:
#              addr: "{{ item }}"
#              type: 'V4'
#      loop: "{{ avi_backend_servers_nsxt }}"
#      when:
#        - nsxt.name is defined
#        - nsxt.pool.name is defined
#        - avi_backend_servers_nsxt is defined
#      tags:
#        - pool
#        - vs

#    - name: Create pools without server - NSX
#      avi_pool:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        name: "{{ item.name }}"
#        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
#        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
#        tier1_lr: "{{ nsxtTier1sVip.0.id }}"
#      loop: "{{ nsxt.pools }}"
#      loop_control:
#        label: "{{ item.name }}"
#      when:
#        - nsxt.pools is defined
#        - nsxt.name is defined
#        - nsxtTier1sVip.0.id is defined
#      tags:
#        - pool
#
#    - name: update pool with servers - NSX
#      avi_pool:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        avi_api_patch_op : add
#        avi_api_update_method: patch
#        name: "{{ item.0.name }}"
#        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
#        tenant_ref: "/api/tenant?name={{ item.0.tenant_ref | default('admin') }}"
#        tier1_lr: "{{ nsxtTier1sVip.0.id }}"
#        lb_algorithm: "{{ item.0.lb_algorithm | default(omit) }}"
#        default_server_port: "{{ item.0.default_server_port | default(omit) }}"
#        servers:
#          - ip:
#              addr: "{{ item.1 }}"
#              type: 'V4'
#      loop: "{{ nsxt.pools | product(avi_backend_servers_nsxt) | list }}"
#      loop_control:
#        label: "pool {{ item.0.name }} patch with {{ item.1 }}"
#      when:
#        - nsxt.pools is defined
#        - avi_backend_servers_nsxt is defined
#        - nsxt.name is defined
#        - nsxtTier1sVip.0.id is defined
#      tags:
#        - pool

#    - name: Create HTTP Policy(ies)
#      avi_httppolicyset:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        name: "{{ item.name }}"
#        http_request_policy: "{{ item.http_request_policy | default(omit) }}"
#      loop: "{{ nsxt.httppolicyset }}"
#      loop_control:
#        label: "{{ item.name }}"
#      when:
#        - nsxt.httppolicyset is defined

#    - name: Create HTTP Virtualservice (based on vsvip)
#      avi_virtualservice:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        name: "{{ item.name }}"
#        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
#        enabled: "{{ item.enabled | default('true') }}"
#        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
#        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-Secure-HTTP') }}"
#        http_policies: "{{ item.http_policies | default(omit) }}"
#        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
#        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
#        services: "{{ item.services }}"
#        pool_ref: "/api/pool?name={{ item.pool_ref }}"
#        enable_rhi: "{{ item.enable_rhi | default('false') }}"
#        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
#        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
#        analytics_policy:
#          udf_log_throttle: 10
#          metrics_realtime_update:
#            duration: 0
#            enabled: true
#          significant_log_throttle: 0
#          client_insights: NO_INSIGHTS
#          full_client_logs:
#            duration: 30
#            throttle: 10
#            enabled: true
#          all_headers: true
#      loop: "{{ nsxt.virtualservices.http }}"
#      loop_control:
#        label: "{{ item.name }}"
#      when:
#        - nsxt.virtualservices.http is defined
#        - nsxt.name is defined
#      register: outputVsHttp
#      tags:
#        - vsHttp
#        - vs

    - name: Create HTTP Virtualservice NSXT Group (based on vsvip)
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vs-nsxt-group-{{ my_idx }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        enabled: "{{ item.0.enabled | default('true') }}"
        tenant_ref: "/api/tenant?name={{ item.0.tenant_ref | default('admin') }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.0.application_profile_ref | default('System-Secure-HTTP') }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.0.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.0.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services:
          - port: 80
            enable_ssl: false
          - port: 443
            enable_ssl: true
        pool_ref: "/api/pool?name=NSXT-Group-{{ my_idx }}-{{ item.1 }}"
        enable_rhi: "{{ item.0.enable_rhi | default('false') }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-nsxt-group-{{ my_idx }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.0.se_group_ref | default('Default-Group') }}"
        analytics_policy:
          udf_log_throttle: 10
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          all_headers: true
      loop: "{{ nsxt.vcenters | product(nsxt.application_ports) | list }}"
      loop_control:
        index_var: my_idx
      when:
        - nsxt.vcenters is defined
        - nsxt.application_ports
        - nsxt.name is defined
        - item.0.application == true
      tags:
        - vsHttp
        - vs

    - name: Create DNS Virtualservice
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-DNS') }}"
        network_profile_ref: "/api/networkprofile/?name={{ item.network_profile_ref | default('System-UDP-Per-Pkt') }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        services: "{{ item.services }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
      loop: "{{ nsxt.virtualservices.dns }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - nsxt.virtualservices.dns is defined
        - nsxt.name is defined
      register: outputVsDns
      tags:
        - vsDns
        - vs

    - name: Update system config with first DNS VS - NSXT
      avi_systemconfiguration:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        dns_virtualservice_refs: "/api/virtualservice/?name={{ nsxt.virtualservices.dns.0.name }}"
      tags:
        - vsDns
        - vs
      when:
        - nsxt.virtualservices.dns.0.name is defined


    # - name: Debug
    #   debug:
    #     msg: "{{ outputVsDns }}"
    #
    # - name: Debug
    #   debug:
    #     msg: "{{ outputVsDns.results.1.obj.uuid }}"

    - name: Wait for the First VS Http to be ready - NSXT
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: virtualservice-inventory
        tenant: "{{ item.tenant_ref | default('admin') }}"
      register: statusVs
      until: statusVs.obj.results.0.runtime.oper_status.state == "OPER_UP"
      retries: 60
      delay: 30
      when: nsxt.virtualservices.http is defined
      ignore_errors: yes
      tags:
        - vsHttp
        - vs