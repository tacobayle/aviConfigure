---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Create Avi DNS provider Without donain names - GCP
      community.network.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ gcp.dns.name | default('dns-avi-gcp')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      when:
        - gcp.domains is defined
      tags:
        - dns

    - name: Update Avi DNS provider With donain names - GCP
      community.network.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op: add
        avi_api_update_method: patch
        internal_profile:
          dns_service_domain:
            - domain_name: "{{ item.name }}"
#              num_dns_ip: 1
              pass_through: true
              record_ttl: 100
          ttl: 300
        name: "{{ gcp.dns.name | default('dns-avi-gcp')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      loop: "{{ gcp.domains }}"
      when:
        - gcp.domains is defined
      tags:
        - dns

    - name: Create Avi IPAM - GCP
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ gcp.ipam_provider_ref | default('ipam-avi-gcp') }}"
        type: IPAMDNS_TYPE_INTERNAL
      tags:
        - ipam

    - name: Define network_config for Cloud Creation - GCP
      set_fact:
        network_config:
          config: INBAND_MANAGEMENT
          inband:
            vpc_subnet_name: "{{ NetworkSeMgmt }}"
            vpc_network_name: "{{ gcp.vpc.name }}"
            vpc_project_id: "{{ gcp.project.name }}"
      when:
        - gcp.vpc.name is defined
        - gcp.project.name is defined
        - NetworkSeMgmt is defined

    - name: Configure Cloud for GCP
      community.network.avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ gcp.name }}"
        vtype: CLOUD_GCP
        gcp_configuration:
          gcs_bucket_name: "{{ gcp.bucket.name }}"
          region_name: "{{ gcp.region }}"
          se_project_id: "{{ gcp.project.name }}"
          firewall_target_tags:
            - "{{ gcp.firewall_target_tags }}"
          network_config: "{{ network_config }}"
          zones: "{{ gcpZones }}"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ gcp.ipam_provider_ref | default('ipam-avi-gcp') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ gcp.dns_provider_ref | default('dns-avi-gcp') }}"
      register: output_cloud_gcp
      when:
        - gcp.name is defined
        - gcp.bucket.name is defined
        - gcp.region is defined
        - gcp.project.name is defined
        - gcp.firewall_target_tags is defined
        - network_config is defined
        - gcpZones is defined
      tags:
        - cloud

    - set_fact:
        cloud_gcp_uuid: "{{ output_cloud_gcp.obj.uuid }}"
      when:
        - output_cloud_gcp is defined
      tags:
        - cloud

    - name: Define Network Range IP Begin - GCP
      set_fact:
        ipBegin: "{{ gcp.network_vip.cidr | ipaddr(gcp.network_vip.ipStartPool) }}"
      when:
        - gcp.network_vip.cidr is defined
        - gcp.network_vip.ipStartPool is defined

    - name: Define Network Range IP Begin - GCP
      set_fact:
        ipBegin: "{{ ipBegin.split('/')[0] }}"
      when:
        - gcp.network_vip.cidr is defined
        - gcp.network_vip.ipStartPool is defined

    - name: Define Network Range IP End
      set_fact:
        ipEnd: "{{ gcp.network_vip.cidr | ipaddr(gcp.network_vip.ipEndPool) }}"
      when:
        - gcp.network_vip.cidr is defined
        - gcp.network_vip.ipEndPool is defined

    - name: Define Network Range IP End - GCP
      set_fact:
        ipEnd: "{{ ipEnd.split('/')[0] }}"
      when:
        - gcp.network_vip.cidr is defined
        - gcp.network_vip.ipEndPool is defined

    - name: Define configured_subnets for network - GCP
      set_fact:
        configured_subnets:
          - prefix:
              mask: "{{ gcp.network_vip.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ gcp.network_vip.type | default('V4') }}"
                addr: "{{ gcp.network_vip.cidr.split('/')[0] }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ gcp.network_vip.type | default('V4') }}"
                    addr: "{{ ipBegin }}"
                  end:
                    type: "{{ gcp.network_vip.type | default('V4') }}"
                    addr: "{{ ipEnd }}"
      when:
        - ipBegin is defined
        - ipEnd is defined
        - gcp.network_vip.cidr is defined

    - name: Create Network for IPAM - GCP
      community.network.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ gcp.network_vip.name | default('net-avi')}}"
        cloud_ref: "/api/cloud/?name={{ gcp.name }}"
        configured_subnets: "{{ configured_subnets }}"
        dhcp_enabled: "{{ gcp.network_vip.dhcp_enabled | default('false')}}"
      register: output_network_vip_gcp
      when:
        - configured_subnets is defined
      tags:
        - ipam

#    - name: get Networks to retrieve Uuid - GCP
#      avi_api_session:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        http_method: get
#        timeout: 300
#        path: network
#      register: networkUuid
#      when:
#        - gcp.network_vip.cidr is defined
#      tags:
#        - ipam
#
#    - name: Append Network uuid to the list - GCP
#      set_fact:
#        listNetworkUuid: "{{ listNetworkUuid | default([]) }} + [ '{{ item.uuid }}' ]"
#      loop: "{{ networkUuid.obj.results }}"
#      loop_control:
#        label: "{{ item.uuid }}"
#      when:
#        - gcp.network_vip.cidr is defined
#      tags:
#        - ipam

    - name: Update Avi IPAM - GCP
      community.network.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        gcp_profile:
          usable_network_refs:
            - "/api/network/{{ output_network_vip_gcp.obj.uuid }}"
        name: "{{ gcp.ipam_provider_ref | default('ipam-avi-gcp') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - output_network_vip_gcp.obj.uuid is defined
      tags:
        - ipam

    - name: sleep for 120 seconds and continue with play
      wait_for: timeout=120
      when:
        - gcp.name is defined
      tags:
        - cloud

    - name: Run a python script against a specific cloud - this takes several minutes
      command: python3 ../python/retrieveCloudStatus.py "{{ controller.aviCredsJsonFile }}" "{{ cloud_gcp_uuid }}"
      register: logCloudStatus
      until: logCloudStatus.stdout == "IMG_GEN_COMPLETE"
      retries: 6 # should be 30 # gcp bug // 'HTTP Error: 400 Error Msg {\"error\": \"Versioning failed converting from 16.4.2 to 20.1.3\"}', <Response [400]>)"], "stdout": "", "stdout_lines": []
      delay: 120
      ignore_errors: yes
      when:
        - gcp.name is defined
      tags:
        - cloud

    - name: Modify/Creating SE group - GCP
      community.network.avi_serviceenginegroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ gcp.name }}"
        avi_api_update_method: put
        name: "{{ item.name }}"
        ha_mode: "{{ item.ha_mode | default('HA_MODE_SHARED') }}"
        min_scaleout_per_vs: "{{ item.min_scaleout_per_vs | default(omit) }}"
        buffer_se: "{{ item.buffer_se | default(omit) }}"
        extra_shared_config_memory: "{{ item.extra_shared_config_memory | default(omit) }}"
        vcenter_folder: "{{ item.vcenter_folder | default(omit) }}"
        vcpus_per_se: "{{ item.vcpus_per_se | default(omit) }}"
        memory_per_se: "{{ item.memory_per_se | default(omit) }}"
        disk_per_se: "{{ item.disk_per_se | default(omit) }}"
        realtime_se_metrics: "{{ item.realtime_se_metrics | default(omit) }}"
        auto_rebalance: "{{ item.auto_rebalance | default(omit) }}"
        auto_rebalance_interval: "{{ item.auto_rebalance_interval | default(omit) }}"
        auto_rebalance_criteria: "{{ item.auto_rebalance_criteria | default(omit) }}"
        instance_flavor: "{{ item.instance_flavor | default(omit) }}"
      loop: "{{ gcp.serviceEngineGroup }}"
      loop_control:
        label: "Modifying SE group called {{ item.name }}"
      when:
        - gcp.serviceEngineGroup is defined
        - gcp.name is defined
      tags:
        - serviceEngineGroup