---
- hosts: localhost
  connection: local

  # vars_files:
  #   - "vars/params.yml"

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Debug
      debug:
        msg: "{{ avi_credentials }}"
      tags:
        - debug

#
# VSVIP creation
#

    - name: Create vsvip for dns VS (AWS or GCP)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0.fqdn | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip: "{{ item.vip }}"
      loop: "{{ avi_virtualservice.dns }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - avi_virtualservice.dns is defined
        - avi_cloud.vtype == "CLOUD_AWS" or avi_cloud.vtype == "CLOUD_GCP"
      tags:
        - vsVip
        - vsDns

    - name: Create vsvip for dns VS (Vcenter)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(avi_network_vip.name) }}"
              subnet:
                mask: "{{ item.mask | default(avi_network_vip.subnet.0.prefix.mask) }}"
                ip_addr:
                  type: "{{ item.type | default(avi_network_vip.subnet.0.prefix.ip_addr.type) }}"
                  addr: "{{ item.addr | default(avi_network_vip.subnet.0.prefix.ip_addr.addr) }}"
      loop: "{{ avi_virtualservice.dns }}"
      when:
        - avi_virtualservice.http is defined
        - avi_cloud.vtype == "CLOUD_VCENTER"
      tags:
        - vsvip
        - vs

    - name: Create vsvip for dns VS (NSXT)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        tier1_lr: "{{ avi_network_vip.tier1 | default(omit) }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(avi_network_vip.name) }}"
              subnet:
                mask: "{{ nsxtSegmentVip.cidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ avi_network_vip.type }}"
                  addr: "{{ nsxtSegmentVip.cidr.split('/')[0] }}"
      loop: "{{ avi_virtualservice.dns }}"
      when:
        - avi_virtualservice.http is defined
        - avi_cloud.vtype == "CLOUD_NSXT"
      tags:
        - vsvip
        - vs

    - name: Create vsvip for http VS (Vcenter)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(avi_network_vip.name) }}"
              subnet:
                mask: "{{ item.mask | default(avi_network_vip.subnet.0.prefix.mask) }}"
                ip_addr:
                  type: "{{ item.type | default(avi_network_vip.subnet.0.prefix.ip_addr.type) }}"
                  addr: "{{ item.addr | default(avi_network_vip.subnet.0.prefix.ip_addr.addr) }}"
      loop: "{{ avi_virtualservice.http }}"
      when:
        - avi_virtualservice.http is defined
        - avi_cloud.vtype == "CLOUD_VCENTER"
      tags:
        - vsvip
        - vs

    - name: Create vsvip for http VS (NSXT)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        tier1_lr: "{{ avi_network_vip.tier1 | default(omit) }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(avi_network_vip.name) }}"
              subnet:
                mask: "{{ nsxtSegmentVip.cidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ avi_network_vip.type }}"
                  addr: "{{ nsxtSegmentVip.cidr.split('/')[0] }}"
      loop: "{{ avi_virtualservice.http }}"
      when:
        - avi_virtualservice.http is defined
        - avi_cloud.vtype == "CLOUD_NSXT"
      tags:
        - vsvip
        - vs

    - name: Create vsvip for http VS (AWS or GCP)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0.fqdn | default(item.name + '.' + domain.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip: "{{ item.vip }}"
      loop: "{{ avi_virtualservice.http }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - avi_virtualservice.http is defined
        - avi_cloud.vtype == "CLOUD_AWS" or avi_cloud.vtype == "CLOUD_GCP"
      tags:
        - vsvip
        - vsHttp

#
# HM creation
#

    - name: Create HTTP health monitor
      avi_healthmonitor:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "{{ item.name }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        http_monitor:
          http_request: "{{ item.http_request }}"
          http_response_code: "{{ item.http_response_code }}"
        receive_timeout: "{{ item.receive_timeout }}"
        failed_checks: "{{ item.failed_checks }}"
        send_interval: "{{ item.send_interval }}"
        successful_checks: "{{ item.successful_checks }}"
        type: "{{ item.type }}"
      loop: "{{ avi_healthmonitor }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.type == "HEALTH_MONITOR_HTTP"
        - avi_healthmonitor is defined
      tags:
        - vsHttp
        - hm
        - pool

#
# Pool creation
#

    - name: Create pool without server
      avi_pool:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "{{ avi_pool.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
      when:
        - avi_pool is defined
      tags:
        - pool
        - vsHttp

    - name: update pool with servers (Vcenter)
      avi_pool:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ avi_pool.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ avi_pool.lb_algorithm | default('LB_ALGORITHM_ROUND_ROBIN') }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ avi_pool.health_monitor_refs }}"
        servers:
          - ip:
              addr: "{{ item }}"
              type: 'V4'
      loop: "{{ avi_servers }}"
      when:
        - avi_servers is defined
        - avi_pool is defined
        - avi_cloud.vtype == "CLOUD_VCENTER" or avi_cloud.vtype == "CLOUD_NSXT"
      tags:
        - pool
        - vsHttp

    - name: Create pool without server for OpenCart
      avi_pool:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "{{ avi_pool_open_cart.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
      when:
        - avi_pool_open_cart is defined
      tags:
        - pool
        - vsHttp

    - name: update pool with servers for OpenCart (Vcenter)
      avi_pool:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ avi_pool_open_cart.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ avi_pool_open_cart.lb_algorithm | default('LB_ALGORITHM_ROUND_ROBIN') }}"
        lb_algorithm_hash: "{{ avi_pool_open_cart.lb_algorithm_hash | default('LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS') }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ avi_pool_open_cart.health_monitor_refs }}"
        servers:
          - ip:
              addr: "{{ item }}"
              type: 'V4'
      loop: "{{ avi_servers_open_cart }}"
      when:
        - avi_servers_open_cart is defined
        - avi_pool_open_cart is defined
        - avi_cloud.vtype == "CLOUD_VCENTER" or avi_cloud.vtype == "CLOUD_NSXT"
      tags:
        - pool
        - vsHttp

    - name: update pool with servers (AWS or GCP)
      avi_pool:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ avi_pool.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ avi_pool.lb_algorithm }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ avi_pool.health_monitor_refs }}"
        servers:
          - ip:
              addr: "{{ item }}"
              type: 'V4'
      loop: "{{ avi_servers }}"
      when:
        - avi_servers is defined
        - avi_pool is defined
        - avi_cloud.vtype == "CLOUD_AWS" or avi_cloud.vtype == "CLOUD_GCP"
      tags:
        - pool
        - vsHttp

#
# VS creation
#
    - name: Create HTTP Virtualservice (based on vsvip)
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-Secure-HTTP') }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services: "{{ item.services }}"
        pool_ref: "/api/pool?name={{ item.pool_ref }}"
        enable_rhi: "{{ item.enable_rhi | default('false') }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        analytics_policy:
          udf_log_throttle: 10
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          all_headers: true
      loop: "{{ avi_virtualservice.http }}"
      when:
        - avi_virtualservice.http is defined
      register: outputVsHttp
      tags:
        - vsHttp

    - name: Create DNS Virtualservice
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "{{ item.name }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-DNS') }}"
        network_profile_ref: "/api/networkprofile/?name={{ item.network_profile_ref | default('System-UDP-Per-Pkt') }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        services: "{{ item.services }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
      loop: "{{ avi_virtualservice.dns }}"
      loop_control:
        label: "{{ item.name }}"
      when: avi_virtualservice.dns is defined
      register: outputVsDns
      tags:
        - vsDns

    - name: Debug
      debug:
        msg: "{{ outputVsDns }}"

    - name: Debug
      debug:
        msg: "{{ outputVsDns.results.1.obj.uuid }}"

    - name: Wait for the VS Http to be ready
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        http_method: get
        timeout: 300
        path: virtualservice-inventory
        tenant: "{{ item.tenant_ref | default('admin') }}"
      register: statusVs
      until: statusVs.obj.results.0.runtime.oper_status.state == "OPER_UP"
      retries: 120
      delay: 10
      when: avi_virtualservice.http is defined
      ignore_errors: yes
      tags:
        - vsHttp
