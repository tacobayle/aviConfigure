---
- hosts: localhost
  connection: local

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Debug
      debug:
        msg: "{{ avi_credentials }}"
      tags:
        - debug

    - name: get Networks to retrieve Uuid - GCP
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
      register: networkUuid
      when:
        - gcp.network_vip.cidr is defined
      tags:
        - ipam

    - name: Append Network uuid to the list - GCP
      set_fact:
        listNetworkUuid: "{{ listNetworkUuid }} + [ '{{ item.uuid }}' ]"
      loop: "{{ networkUuid.obj.results }}"
      loop_control:
        label: "{{ item.uuid }}"
      when:
        - gcp.network_vip.cidr is defined
      tags:
        - ipam

    - name: Define vip data - GCP
      set_fact:
        vipGcp:
          - ipam_network_subnet:
              network_ref: "{{ listNetworkUuid.0 | default('Null') }}"
              subnet:
                mask: "{{ gcp.network_vip.cidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ gcp.network_vip.type | default('V4') }}"
                  addr: "{{ gcp.network_vip.cidr.split('/')[0] }}"
            avi_allocated_fip: true
            auto_allocate_ip: true
            auto_allocate_floating_ip: true
      when:
        - gcp.network_vip.cidr is defined
        - listNetworkUuid is defined

    - name: Create vsvip for dns VS (GCP)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ gcp.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0.fqdn | default(item.name + '.' + gcp.domains.0.name ) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip: "{{ vipGcp }}"
      loop: "{{ gcp.virtualservices.dns }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - gcp.virtualservices.dns is defined
        - gcp.domains is defined
        - gcp.name is defined
        - item.name is defined
      tags:
        - vsVip
        - vsDns
        - vs

    - name: Create vsvip for http VS (GCP)
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ item.cloud_ref | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0.fqdn | default(item.name + '.' + gcp.domains.0.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip: "{{ vipGcp }}"
      loop: "{{ avi_virtualservice.http }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - avi_virtualservice.http is defined
        - item.cloud_ref == "cloudGcp"
      tags:
        - vsvip
        - vsHttp
        - vs
