---
- hosts: localhost
  connection: local

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Update Network Vip Placement
      avi_network:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ avi_network_vip.name }}"
        configured_subnets: "{{ avi_network_vip.subnet }}"
        dhcp_enabled: "{{ avi_network_vip.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ avi_network_vip.exclude_discovered_subnets }}"
        vcenter_dvs: "{{ avi_network_vip.vcenter_dvs }}"
      register: networkOutput
      when:
        - avi_network_vip is defined
        - avi_cloud.vtype == "CLOUD_VCENTER"
      tags:
        - ipam

    - name: Debug
      debug:
        msg: "{{ networkOutput.obj.uuid }}"
      tags:
        - debug
      when:
        - avi_network_vip is defined
        - avi_cloud.vtype == "CLOUD_VCENTER"

    - name: Update Network backend
      avi_network:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ avi_network_backend.name }}"
        configured_subnets: "{{ avi_network_backend.subnet }}"
        dhcp_enabled: "{{ avi_network_backend.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ avi_network_backend.exclude_discovered_subnets }}"
        vcenter_dvs: "{{ avi_network_backend.vcenter_dvs }}"
      when:
        - avi_network_backend is defined
        - avi_cloud.vtype == "CLOUD_VCENTER"
      tags:
        - ipam

    # - name: get Networks to retrieve Uuid
    #   avi_api_session:
    #     avi_credentials: "{{ avi_credentials }}"
    #     api_version: "{{ avi_credentials.api_version }}"
    #     http_method: get
    #     timeout: 300
    #     path: network
    #     params:
    #       page_size: -1
    #   register: networkUuid
    #   when: network is defined
    #   tags:
    #     - ipam
    #
    # - name: Append Network uuid to the list
    #   set_fact:
    #     listNetworkUuid: "{{ listNetworkUuid }} + [ '{{ item.uuid }}' ]"
    #   loop: "{{ networkUuid.obj.results }}"
    #   loop_control:
    #    label: "{{ item.uuid }}"
    #   when: network is defined
    #   tags:
    #     - ipam

    - name: Create Avi IPAM
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        internal_profile:
          usable_network_refs:
            - "/api/network/{{ networkOutput.obj.uuid }}"
        name: "{{ ipam.name | default('ipam-avi') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - avi_network_vip is defined
        - avi_cloud.vtype == "CLOUD_VCENTER"
      tags:
        - ipam

    - name: Update Avi Cloud
      avi_cloud:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "{{ avi_cloud.name }}"
        vtype: "{{ avi_cloud.vtype }}"
        vcenter_configuration: "{{ avi_cloud.vcenter_configuration }}"
        dhcp_enabled: "{{ avi_cloud.dhcp_enabled }}"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ avi_cloud.ipam_provider_ref | default('ipam-avi') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ avi_cloud.dns_provider_ref | default('dns-avi') }}"
        se_group_template_ref: "/api/serviceenginegroup?name=Default-Group"
      register: aviCloudOutput
      when:
        - avi_network_vip is defined
        - avi_cloud.vtype == "CLOUD_VCENTER"
      tags:
        - cloud
        - ipam
        - dns

    # - set_fact:
    #     aviCloudUuid: "{{ aviCloudOutput.obj.uuid }}"
    #   when:
    #     - avi_network_vip is defined
    #     - avi_cloud.vtype == "CLOUD_VCENTER"
    #   tags:
    #     - cloud
    #     - ipam
    #     - dns

    - name: Wait for the cloud to be ready
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        http_method: get
        timeout: 300
        path: cloud-inventory
      register: statusCloud
      until: statusCloud.obj.results.1.status.state == "CLOUD_STATE_PLACEMENT_READY"
      retries: 120
      delay: 10
      when:
        - avi_network_vip is defined
        - avi_cloud.vtype == "CLOUD_VCENTER"
      tags:
        - cloud
        - ipam
        - dns
