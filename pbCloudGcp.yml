---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Create Avi DNS provider Without donain names - GCP
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ gcp.dns.name | default('dns-avi-gcp')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      when:
        - gcp.domains is defined
      tags:
        - dns

    - name: Update Avi DNS provider With donain names - GCP
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op: add
        avi_api_update_method: patch
        internal_profile:
          dns_service_domain:
            - domain_name: "{{ item.name }}"
              num_dns_ip: 1
              pass_through: true
              record_ttl: 100
          ttl: 300
        name: "{{ gcp.dns.name | default('dns-avi-gcp')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      loop: "{{ gcp.domains }}"
      when:
        - gcp.domains is defined
      tags:
        - dns

    - name: Create Avi IPAM - GCP
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ ipam.name | default('ipam-avi') }}"
        type: IPAMDNS_TYPE_INTERNAL
      tags:
        - ipam

    - name: Configure Cloud for GCP
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ gcp.name }}"
        vtype: CLOUD_GCP
        gcp_configuration:
          gcs_bucket_name: "{{ gcp.bucket.name }}"
          region_name: "{{ gcp.region }}"
          se_project_id: "{{ gcp.project.name }}"
          firewall_target_tags:
            - "{{ gcp.firewall_target_tags }}"
          network_config: "{{ gcp.network_config }}"
          zones: "{{ gcpZones }}"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ gcp.ipam_provider_ref | default('ipam-avi') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ gcp.dns_provider_ref | default('dns-avi') }}"
      register: aviCloudGcp
      when:
        - gcp is defined
        - gcpZones is defined
      tags:
        - cloud

    - name: Define Cloud GCP uuid
      set_fact:
        aviCloudGcpUuid: "{{ aviCloudGcp.obj.uuid }}"
      when:
        - gcp is defined
      tags:
        - cloud


    - name: Define Network Range IP Begin - GCP
      set_fact:
        ipBegin: "{{ gcp.network_vip.cidr | ipaddr(gcp.network_vip.ipStartPool) }}"
      when:
        - gcp.network_vip.cidr is defined
        - gcp.network_vip.ipStartPool is defined

    - name: Define Network Range IP Begin - GCP
      set_fact:
        ipBegin: "{{ ipBegin.split('/')[0] }}"
      when:
        - gcp.network_vip.cidr is defined
        - gcp.network_vip.ipStartPool is defined

    - name: Define Network Range IP End
      set_fact:
        ipEnd: "{{ gcp.network_vip.cidr | ipaddr(gcp.network_vip.ipEndPool) }}"
      when:
        - gcp.network_vip.cidr is defined
        - gcp.network_vip.ipEndPool is defined

    - name: Define Network Range IP End - GCP
      set_fact:
        ipEnd: "{{ ipEnd.split('/')[0] }}"
      when:
        - gcp.network_vip.cidr is defined
        - gcp.network_vip.ipEndPool is defined

    - name: Define configured_subnets for network - GCP
      set_fact:
        configured_subnets:
          - prefix:
              mask: "{{ gcp.network_vip.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ gcp.network_vip.type | default('V4') }}"
                addr: "{{ gcp.network_vip.cidr.split('/')[0] }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ gcp.network_vip.type | default('V4') }}"
                    addr: "{{ ipBegin }}"
                  end:
                    type: "{{ gcp.network_vip.type | default('V4') }}"
                    addr: "{{ ipEnd }}"
      when:
        - ipBegin is defined
        - ipEnd is defined
        - gcp.network_vip.cidr is defined

    - name: Create Network for IPAM - GCP
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ gcp.network_vip.name | default('net-avi')}}"
        cloud_ref: "/api/cloud/?name={{ gcp.name }}"
        configured_subnets: "{{ configured_subnets }}"
        dhcp_enabled: "{{ gcp.network_vip.dhcp_enabled | default('false')}}"
      when:
        - configured_subnets is defined
      tags:
        - ipam

    - name: get Networks to retrieve Uuid
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
      register: networkUuid
      when:
        - gcp.network_vip.cidr is defined
      tags:
        - ipam

    - name: Append Network uuid to the list
      set_fact:
        listNetworkUuid: "{{ listNetworkUuid }} + [ '{{ item.uuid }}' ]"
      loop: "{{ networkUuid.obj.results }}"
      loop_control:
        label: "{{ item.uuid }}"
      when:
        - gcp.network_vip.cidr is defined
      tags:
        - ipam

    - name: Update Avi IPAM
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        gcp_profile:
          usable_network_refs:
            - "/api/network/{{ listNetworkUuid.0 }}"
        name: "{{ ipam.name | default('ipam-avi') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - listNetworkUuid is defined
      tags:
        - ipam


