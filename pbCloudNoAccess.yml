---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - add_host:
        hostname: avicontroller
        ansible_host: "{{ avi_credentials.controller }}"
        ansible_port: 22
        ansible_user: "{{ controller.username }}"
        ansible_ssh_pass: "{{ controller.password }}"
      when:
        - no_access is defined


    - block:
      - name: Retrieve Avi Version Info
        avi_api_session:
          avi_credentials: "{{ avi_credentials | default(omit) }}"
          api_context: "{{ avi_api_context | default(omit) }}"
          http_method: get
          path: cluster/runtime
          params:
        register: cluster_results
        delegate_to: "localhost"

      - set_fact:
          se_master_ctl_version: "{{ cluster_results.obj.node_info.version.split('(')[0] }}"


      - name: Avi SE | Image deploy | Set SE image path for controller version < 18.2.6
        set_fact:
          se_image_path: "/opt/avi/se_ova"
        when:
          - se_master_ctl_version < "18.2.6"

      when:
        - no_access is defined

#### end of block


    - block:
      - name: Retrieve Avi Version Info
        avi_api_session:
          avi_credentials: "{{ avi_credentials | default(omit) }}"
          api_context: "{{ avi_api_context | default(omit) }}"
          http_method: get
          path: "initial-data"
        register: data_res
        delegate_to: "localhost"

      - set_fact:
          se_master_ctl_version: "{{ cluster_results.obj.node_info.version.split('(')[0] }}"

      - name: Avi SE | Image deploy | Set SE image path for controller version >= 18.2.6
        set_fact:
          se_image_path: "/host/pkgs/{{ data_res.obj.version.Tag }}"
        when:
          - se_master_ctl_version >= "18.2.6"

      when:
        - no_access is defined

#### end of block

    - name:  Generate SE image on controller
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: post
        path: 'fileservice/seova'
        timeout: 600
        data:
          file_format: ova
      delegate_to: localhost
      when:
        - no_access is defined

- hosts: avicontroller
  gather_facts: no

  tasks:

    - set_fact:
        se_image_path: "{{ hostvars['localhost']['se_image_path'] }}"

    - name: Download SE image
      fetch:
        src: "{{ se_image_path }}/se.ova"
        dest: ./
        flat: yes
        validate_checksum: False
      when:
        - no_access is defined

    - name: Define ova path (in controller variable)
      set_fact:
        ova_path: "./se.ova"
      when:
        - no_access is defined

- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Define ova path (in localhost variable)
      set_fact:
        ova_path: "{{ hostvars['avicontroller']['ova_path'] }}"

    - name: Configure Avi Cloud for No Access
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ no_access.name }}"
        vtype: CLOUD_NONE
        apic_mode: false
        dhcp_enabled: "{{ no_access.dhcp_enabled }}"
        mtu: 1500
        prefer_static_routes: false
        enable_vip_static_routes: false
        license_type: LIC_CORES
        state_based_dns_registration: "{{ no_access.state_based_dns_registration }}"
        ip6_autocfg_enabled: "{{ no_access.ip6_autocfg_enabled }}"
        dns_resolution_on_se: false
        enable_vip_on_all_interfaces: false
        license_tier: ENTERPRISE
        autoscale_polling_interval: 60
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ no_access.ipam_provider_ref | default('ipam-avi') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ no_access.dns_provider_ref | default('dns-avi') }}"
      register: aviCloudOutput
      tags:
        - cloud
      when:
        - no_access is defined

    - name:  Define Cloud UUID variable
      set_fact:
        cloud_uuid_no_access: "{{ aviCloudOutput.obj.uuid }}"
      when:
        - no_access is defined

    - name: Get main Cluster Information
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: cluster
      register: clusterInfo
      when:
        - no_access is defined
      tags:
        - cluster

    - name: Define cluster uuid variable
      set_fact:
        cluster_uuid: "{{ clusterInfo['obj'].uuid }}"
      when:
        - no_access is defined

    - name: Debug variable cloud uuid
      debug:
        msg: "{{ cloud_uuid_no_access }}"
      tags:
        - debug
      when:
        - no_access is defined

    - name: Debug variable cluster uuid
      debug:
        msg: "{{ cluster_uuid }}"
      tags:
        - debug
      when:
        - no_access is defined

    - name: Debug variable controller IP
      debug:
        msg: "{{ avi_credentials.controller }}"
      tags:
        - debug
      when:
        - no_access is defined

    - name: Debug variable OVA path
      debug:
        msg: "{{ ova_path }}"
      tags:
        - debug
      when:
        - no_access is defined

    # - name: with_sequence -> loop
    #   include_tasks: deploySeInVcenter.yml
    #   loop: "{{ serviceEngineGroup }}"
    #   when:
    #     - no_access is defined

# block that needs to be replayed for each SE group

    - name: Generate Auth Token for SE
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: securetoken-generate
        params:
          cloud_uuid: "{{ cloud_uuid_no_access }}"
      register: token_results
      loop: "{{ range(0, serviceEngineGroup.0.numberOfSe, 1) | list }}"
      when:
        - no_access is defined
        - serviceEngineGroup.0.numberOfSe is defined
      delegate_to: "localhost"

    - name: Define auth token variable
      set_fact:
        auth_token_list: "{{ token_results.results }}"
      when:
        - no_access is defined

    - name: Debug Auth Token
      debug:
        msg: "{{ item.obj.auth_token }}"
      loop: "{{ auth_token_list }}"
      tags:
        - debug
      when:
        - no_access is defined


    - name:  deploy Avi serviceengine for First SE group
      vmware_deploy_ovf:
        hostname: "{{ vcenter.hostname }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        # folder: "{{ vcenter.folder | default('/SDDC-Datacenter/aviSe',true) }}"
        datacenter: "{{ vcenter.datacenter | default('SDDC-Datacenter',true) }}"
        cluster: "{{ vcenter.cluster | default('Cluster-1',true) }}"
        datastore: "{{ vcenter.datastore | default('WorkloadDatastore',true) }}"
        name: "{{ 'grp1-se%02x' | format(item.0) }}"
        validate_certs: False
        networks:
          Management: "{{ vcenter.networkManagementSe | default('default',true) }}"
          Data Network 1: "{{ vcenter.networkVipSe | default('default',true) }}"
          Data Network 2: "{{ vcenter.networkBackendSe | default('default',true) }}"
          Data Network 3: "{{ data_network3.se_int_pg | default('default',true) }}"
          Data Network 4: "{{ data_network4.se_int_pg | default('default',true) }}"
          Data Network 5: "{{ data_network5.se_int_pg | default('default',true) }}"
          Data Network 6: "{{ data_network6.se_int_pg | default('default',true) }}"
          Data Network 7: "{{ data_network7.se_int_pg | default('default',true) }}"
          Data Network 8: "{{ data_network8.se_int_pg | default('default',true) }}"
          Data Network 9: "{{ data_network9.se_int_pg | default('default',true) }}"
        properties:
          AVICNTRL: "{{ avi_credentials.controller }}"
          AVICNTRL_AUTHTOKEN: "{{ item.1.obj.auth_token }}"
          AVICNTRL_CLUSTERUUID: "{{ cluster_uuid }}"
          avi.mgmt-ip.SE: "{{ se_mgmt_ip | default(omit) }}"
          avi.mgmt-mask.SE: "{{ se_mgmt_mask | default(omit) }}"
          avi.default-gw.SE: "{{ se_mgmt_gw| default(omit) }}"
        power_on: no
        ova: "{{ ova_path }}"
      register: se_status_se_group_one
      delegate_to: "localhost"
      loop: "{{ range(0, serviceEngineGroup.0.numberOfSe, 1) | zip(auth_token_list) | list }}"
      when:
        - no_access is defined
        - serviceEngineGroup.0.numberOfSe is defined

    - set_fact:
        se_status_se_group_one_list : "{{ se_status_se_group_one.results }}"
      when:
        - se_status_se_group_one is defined
        - no_access is defined

    - name: Modify SE(s) Hardware for First SE group
      vmware_guest:
        hostname: "{{ vcenter.hostname }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: False
        uuid: "{{ item.instance.hw_product_uuid }}"
        hardware:
          memory_mb: "{{ serviceEngineGroup.0.memory_per_se | default(2048,true) }}"
          memory_reservation_lock: "{{ serviceEngineGroup.0.mem_reserve | default(False,true) }}"
          num_cpus: "{{ serviceEngineGroup.0.vcpus_per_se | default(1,true) }}"
          cpu_reservation: "{{ serviceEngineGroup.0.cpu_reserve | default(omit,true) }}"
        disk:
        - size_gb: "{{ serviceEngineGroup.0.disk_per_se | default(20,true) }}"
        state: present
      delegate_to: "localhost"
      loop: "{{ se_status_se_group_one_list }}"
      when:
        - no_access is defined
        - serviceEngineGroup.0.numberOfSe is defined

    - name: Power On SE(s) for the first group
      vmware_guest:
        hostname: "{{ vcenter.hostname }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: False
        uuid: "{{ item.instance.hw_product_uuid }}"
        wait_for_ip_address: yes
        state: poweredon
      delegate_to: "localhost"
      register: se_group_one
      loop: "{{ se_status_se_group_one_list }}"
      when:
        - no_access is defined
        - serviceEngineGroup.0.numberOfSe is defined

    - name: Recording SE(s) Management IP for the first group
      set_fact:
        se_group_one_mgmt_ip_list: "{{ se_group_one.results }}"
      when:
        - no_access is defined
        - serviceEngineGroup.0.numberOfSe is defined

    - name: Debugging Management IP for the first group
      debug:
        msg:  "{{ item.instance.ipv4 }}"
      loop: "{{ se_group_one_mgmt_ip_list }}"
      when:
        - no_access is defined
        - serviceEngineGroup.0.numberOfSe is defined

    - name: Waiting for the SE to be seen by the controller
      include_tasks: pbWaitingForSeToBeSeen.yml
      loop: "{{ se_group_one_mgmt_ip_list }}"
      when:
        - no_access is defined
        - serviceEngineGroup.0.numberOfSe is defined

    - name: Waiting for the SE to connect to the controller
      include_tasks: pbWaitingForSeToConnect.yml
      loop: "{{ se_group_one_mgmt_ip_list }}"
      when:
        - no_access is defined
        - serviceEngineGroup.0.numberOfSe is defined

# end of block that needs to be replayed for each SE group


    # - name:  deploy Avi serviceengine for Second SE group
    #   vmware_deploy_ovf:
    #     hostname: "{{ vcenter.hostname }}"
    #     username: "{{ vcenter.username }}"
    #     password: "{{ vcenter.password }}"
    #     # folder: "{{ vcenter.folder | default('/SDDC-Datacenter/aviSe',true) }}"
    #     datacenter: "{{ vcenter.datacenter | default('SDDC-Datacenter',true) }}"
    #     cluster: "{{ vcenter.cluster | default('Cluster-1',true) }}"
    #     datastore: "{{ vcenter.datastore | default('WorkloadDatastore',true) }}"
    #     name: "{{ 'grp2-se%02x' | format(item) }}"
    #     validate_certs: False
    #     networks:
    #       Management: "{{ vcenter.networkManagementSe | default('default',true) }}"
    #       Data Network 1: "{{ vcenter.networkVipSe | default('default',true) }}"
    #       Data Network 2: "{{ vcenter.networkBackendSe | default('default',true) }}"
    #       Data Network 3: "{{ data_network3.se_int_pg | default('default',true) }}"
    #       Data Network 4: "{{ data_network4.se_int_pg | default('default',true) }}"
    #       Data Network 5: "{{ data_network5.se_int_pg | default('default',true) }}"
    #       Data Network 6: "{{ data_network6.se_int_pg | default('default',true) }}"
    #       Data Network 7: "{{ data_network7.se_int_pg | default('default',true) }}"
    #       Data Network 8: "{{ data_network8.se_int_pg | default('default',true) }}"
    #       Data Network 9: "{{ data_network9.se_int_pg | default('default',true) }}"
    #     properties:
    #       AVICNTRL: "{{ avi_credentials.controller }}"
    #       AVICNTRL_AUTHTOKEN: "{{ auth_token }}"
    #       AVICNTRL_CLUSTERUUID: "{{ cluster_uuid }}"
    #       avi.mgmt-ip.SE: "{{ se_mgmt_ip | default(omit) }}"
    #       avi.mgmt-mask.SE: "{{ se_mgmt_mask | default(omit) }}"
    #       avi.default-gw.SE: "{{ se_mgmt_gw| default(omit) }}"
    #     power_on: no
    #     ova: "{{ ova_path }}"
    #   register: se_status_se_group_two
    #   delegate_to: "localhost"
    #   loop: "{{ range(0, serviceEngineGroup.1.numberOfSe, 1) | list }}"
    #   when:
    #     - no_access is defined
    #     - serviceEngineGroup.1.numberOfSe is defined
    #
    # - name: Modify SE Hardware for Second SE group
    #   vmware_guest:
    #     hostname: "{{ vcenter.hostname }}"
    #     username: "{{ vcenter.username }}"
    #     password: "{{ vcenter.password }}"
    #     validate_certs: False
    #     uuid: "{{ item.instance.hw_product_uuid }}"
    #     hardware:
    #       memory_mb: "{{ serviceEngineGroup.1.memory_per_se | default(2048,true) }}"
    #       memory_reservation_lock: "{{ serviceEngineGroup.1.tobereplaced | default(False,true) }}"
    #       num_cpus: "{{ serviceEngineGroup.1.vcpus_per_se | default(1,true) }}"
    #       cpu_reservation: "{{ serviceEngineGroup.1.tobereplaced | default(omit,true) }}"
    #     disk:
    #     - size_gb: "{{ serviceEngineGroup.1.disk_per_se | default(20,true) }}"
    #     state: present
    #   delegate_to: "localhost"
    #   loop: "{{ se_status_se_group_two_list }}"
    #   when:
    #     - no_access is defined
    #     - serviceEngineGroup.1.numberOfSe is defined
    #
    # - name: Power On SE(s) for the second group
    #   vmware_guest:
    #     hostname: "{{ vcenter.hostname }}"
    #     username: "{{ vcenter.username }}"
    #     password: "{{ vcenter.password }}"
    #     validate_certs: False
    #     uuid: "{{ item.instance.hw_product_uuid }}"
    #     wait_for_ip_address: yes
    #     state: poweredon
    #   delegate_to: "localhost"
    #   register: se_group_two
    #   loop: "{{ se_status_se_group_two_list }}"
    #   when:
    #     - no_access is defined
    #     - serviceEngineGroup.1.numberOfSe is defined
    #
    # - name: Recording SE(s) Management IP for the second group
    #   set_fact:
    #     se_group_two_mgmt_ip_list: "{{ se_group_two.results }}"
    #   when:
    #     - no_access is defined
    #     - serviceEngineGroup.1.numberOfSe is defined
    #
    # - name: Debugging Management IP for the second group
    #   debug:
    #     msg:  "{{ item.instance.ipv4 }}"
    #   loop: "{{ se_status_se_group_two_list }}"
    #   when:
    #     - no_access is defined
    #     - serviceEngineGroup.1.numberOfSe is defined
