---
- hosts: localhost
  connection: local

  # vars_files:
  #   - "vars/params.yml"

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Debug
      debug:
        msg: "{{ avi_credentials }}"
      tags:
        - debug

    - name: Define vip data (Multi AZ) - AWS
      set_fact:
        vipAwsMultiAz: "{{ vipAwsMultiAz | default([]) + [{ 'vip_id': my_idx, 'auto_allocate_floating_ip': 'true', 'auto_allocate_ip': 'true', 'avi_allocated_fip': 'true', 'subnet': {'ipam_network_subnet': {'subnet_uuid': item.2, 'subnet': {'mask': item.1.cidr.split('/')[1], 'type': 'V4', 'addr': item.1.cidr.split('/')[0] }}}}] }}"
      loop: "{{ awsZones | zip(aws.network_vip, awsSubnetAviVsIds) | list }}"
      loop_control:
        index_var: my_idx
      when:
        - aws is defined
        - awsZones is defined
        - aws.network_vip is defined
        - awsSubnetAviVsIds is defined

    - name: Debug VIP data (Multi AZ) - AWS
      debug:
        msg: "{{ vipAwsMultiAz }}"
      when:
        - aws is defined
        - awsZones is defined
        - aws.network_vip is defined
        - awsSubnetAviVsIds is defined
      tags:
        - debug

    - name: Define vip data (Single AZ) - AWS
      set_fact:
        vipAwsSingleAz: "{{ vipAwsSingleAz | default([]) + [{ 'vip_id': '0', 'auto_allocate_floating_ip': 'true', 'auto_allocate_ip': 'true', 'avi_allocated_fip': 'true', 'subnet': {'ipam_network_subnet': {'subnet_uuid': awsSubnetAviVsIds.1, 'subnet': {'mask': aws.network_vip.0.cidr.split('/')[1], 'type': 'V4', 'addr': aws.network_vip.0.cidr.split('/')[0] }}}}] }}"
      when:
        - aws is defined
        - awsZones is defined
        - aws.network_vip is defined
        - awsSubnetAviVsIds is defined

    - name: Debug VIP data (Single AZ) - AWS
      debug:
        msg: "{{ vipAwsSingleAz }}"
      when:
        - aws is defined
        - awsZones is defined
        - aws.network_vip is defined
        - awsSubnetAviVsIds is defined
      tags:
        - debug

    - name: Create vsvip for dns VS - AWS
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0.fqdn | default(item.name + '.' + aws.domains.0.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip: "{{ vipAwsSingleAz }}"
      loop: "{{ aws.virtualservices.dns }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - aws.name is defined
        - vipAwsSingleAz is defined
        - aws.domains.0.name is defined
        - aws.virtualservices.dns is defined
      tags:
        - vsVip
        - vsDns
        - vs

    - name: Create vsvip for http VS - AWS
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0.fqdn | default(item.name + '.' + aws.domains.0.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip: "{{ vipAwsMultiAz }}"
      loop: "{{ aws.virtualservices.http }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - aws.name is defined
        - vipAwsMultiAz is defined
        - aws.domains.0.name is defined
        - aws.virtualservices.http is defined
      tags:
        - vsvip
        - vsHttp
        - vs

    - name: Create pool without server - AWS
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ aws.pool.name }}"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
      when:
        - aws.name is defined
        - aws.pool.name is defined
      tags:
        - pool
        - vsHttp
        - vs

    - name: update pool with servers - AWS
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ aws.pool.name }}"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ gcp.pool.lb_algorithm | default('LB_ALGORITHM_ROUND_ROBIN') }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ avi_pool.health_monitor_refs | default('hm1') }}"
        servers:
          - ip:
              addr: "{{ item }}"
              type: 'V4'
      loop: "{{ avi_backend_servers_aws }}"
      when:
        - aws.name is defined
        - aws.pool.name is defined
        - avi_backend_servers_aws is defined
      tags:
        - pool
        - vsHttp
        - vs

    - name: Create pool without server for OpenCart - AWS
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ aws.pool_opencart.name }}"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
      when:
        - aws.name is defined
        - aws.pool_opencart.name is defined
      tags:
        - pool
        - vsHttp
        - vs

    - name: update pool with servers for OpenCart - AWS
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ aws.pool_opencart.name }}"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ avi_pool_open_cart.lb_algorithm | default('LB_ALGORITHM_ROUND_ROBIN') }}"
        #application_persistence_profile_ref: "/api/applicationpersistenceprofile?name={{ avi_pool_open_cart.application_persistence_profile_ref | default('System-Persistence-Client-IP') }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ aws.pool_opencart.health_monitor_refs | default('hm1') }}"
        servers:
          - ip:
              addr: "{{ item }}"
              type: 'V4'
      loop: "{{ avi_backend_servers_opencart_aws }}"
      when:
        - aws.name is defined
        - aws.pool_opencart.name is defined
        - avi_backend_servers_opencart_aws is defined
      tags:
        - pool
        - vsHttp
        - vs

    - name: create autoscalepolicy for ASG - AWS
      avi_serverautoscalepolicy:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: autoscalepolicyAsg
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        min_size: 2
        max_size: 2
        max_scaleout_adjustment_step: 2
        max_scalein_adjustment_step: 2
        scaleout_cooldown: 30
        scalein_cooldown: 30
      when:
        - aws.name is defined
      tags:
        - asg

    - name: create pool with servers based on Auto Scaling Group - AWS
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ aws.pool.asg.name }}"
        autoscale_launch_config_ref: "/api/autoscalelaunchconfig?name=default-autoscalelaunchconfig"
        autoscale_policy_ref: "/api/serverautoscalepolicy?name=autoscalepolicyAsg"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ item.lb_algorithm | default('LB_ALGORITHM_ROUND_ROBIN') }}"
        external_autoscale_groups:
          - "{{ asg_id }}"
        application_persistence_profile_ref: "/api/applicationpersistenceprofile?name=System-Persistence-Client-IP"
        health_monitor_refs:
          - "/api/healthmonitor?name=hm1"
      when:
        - aws.pool.asg.name is defined
        - aws.name is defined
        - asg_id is defined
      tags:
        - asg

    - name: Create HTTP Virtualservice (based on vsvip) - AWS
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        enabled: "{{ item.enabled | default('true') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-Secure-HTTP') }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services: "{{ item.services }}"
        pool_ref: "/api/pool?name={{ item.pool_ref }}"
        enable_rhi: "{{ item.enable_rhi | default('false') }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        analytics_policy:
          udf_log_throttle: 10
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          all_headers: true
      loop: "{{ aws.virtualservices.http }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - aws.virtualservices.http is defined
        - aws.name is defined
      register: outputVsHttp
      tags:
        - vsHttp
        - vs

    - name: Create DNS Virtualservice - AWS
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-DNS') }}"
        network_profile_ref: "/api/networkprofile/?name={{ item.network_profile_ref | default('System-UDP-Per-Pkt') }}"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        services: "{{ item.services }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
      loop: "{{ aws.virtualservices.dns }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - aws.virtualservices.dns is defined
        - aws.name is defined
      register: outputVsDns
      tags:
        - vsDns
        - vs

    - name: Update system config with first DNS VS - AWS
      avi_systemconfiguration:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        dns_virtualservice_refs: "/api/virtualservice/?name={{ aws.virtualservices.dns.0.name }}"
      tags:
        - vsDns
        - vs
      when:
        - avi_virtualservice.dns.0.name is defined


    # - name: Debug
    #   debug:
    #     msg: "{{ outputVsDns }}"
    #
    # - name: Debug
    #   debug:
    #     msg: "{{ outputVsDns.results.1.obj.uuid }}"

    - name: Wait for the VS Http to be ready - AWS
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: virtualservice-inventory
        tenant: "{{ item.tenant_ref | default('admin') }}"
      register: statusVs
      until: statusVs.obj.results.0.runtime.oper_status.state == "OPER_UP"
      retries: 120
      delay: 10
      when:
        - aws.virtualservices.http is defined
      ignore_errors: yes
      tags:
        - vsHttp
        - vs
