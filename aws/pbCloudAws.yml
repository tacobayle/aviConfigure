---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Defining AWS Zones datas structure
      set_fact:
        zones: "{{ zones | default([]) + [{ 'availability_zone': item.0, 'mgmt_network_uuid': item.1, 'mgmt_network_name': item.2.cidr }] }}"
      loop: "{{ awsZones | zip(awsSubnetSeMgtIds, aws.management_network) | list }}"
      when:
        - aws is defined
        - awsZones is defined
        - awsSubnetSeMgtIds is defined
        - aws.management_network is defined
      tags:
        - cloud

    - name: Debug
      debug:
        msg: "{{ zones }}"
      when:
        - aws is defined

    - name: Configure Avi Cloud for AWS (using IAM role or secret key)
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ aws.name }}"
        vtype: CLOUD_AWS
        aws_configuration:
          use_iam_roles: "{{ aws.use_iam_roles | default('true') }}"
          secret_access_key: "{{ aws.secret_access_key | default(omit) }}"
          access_key_id: "{{ aws.access_key_id | default(omit) }}"
          region: "{{ aws.region }}"
          route53_integration: true
          asg_poll_interval: 60
          vpc_id: "{{ aws_vpc_id }}"
          zones: "{{ zones }}"
      register: output_cloud_aws
      when:
        - aws.name is defined
        - aws.region is defined
        - aws_vpc_id is defined
        - zones is defined
      tags:
        - cloud

    - set_fact:
        cloud_aws_uuid: "{{ output_cloud_aws.obj.uuid }}"
      when:
        - output_cloud_aws.obj.uuid is defined
      tags:
        - cloud

    - name: sleep for 120 seconds and continue with play
      wait_for: timeout=120
      when:
        - aws.name is defined
      tags:
        - cloud

    - name: Run a python script against cloud and check the status of the specific cloud - this takes several minutes
      command: python3 ../python/retrieveCloudStatus.py "{{ controller.aviCredsJsonFile }}" "{{ cloud_aws_uuid }}"
      register: logCloudStatus
      until: logCloudStatus.stdout == "IMG_GEN_COMPLETE"
      retries: 60
      delay: 30
      ignore_errors: yes
      when:
        - aws.name is defined
      tags:
        - cloud

    - name: Modify/Creating SE group - AWS
      avi_serviceenginegroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ aws.name }}"
        avi_api_update_method: put
        name: "{{ item.name }}"
        ha_mode: "{{ item.ha_mode | default('HA_MODE_SHARED') }}"
        min_scaleout_per_vs: "{{ item.min_scaleout_per_vs | default(omit) }}"
        buffer_se: "{{ item.buffer_se | default(omit) }}"
        extra_shared_config_memory: "{{ item.extra_shared_config_memory | default(omit) }}"
        vcenter_folder: "{{ item.vcenter_folder | default(omit) }}"
        vcpus_per_se: "{{ item.vcpus_per_se | default(omit) }}"
        memory_per_se: "{{ item.memory_per_se | default(omit) }}"
        disk_per_se: "{{ item.disk_per_se | default(omit) }}"
        realtime_se_metrics: "{{ item.realtime_se_metrics | default(omit) }}"
        auto_rebalance: "{{ item.auto_rebalance | default(omit) }}"
        auto_rebalance_interval: "{{ item.auto_rebalance_interval | default(omit) }}"
        auto_rebalance_criteria: "{{ item.auto_rebalance_criteria | default(omit) }}"
        instance_flavor: "{{ item.instance_flavor | default(omit) }}"
      loop: "{{ aws.serviceEngineGroup }}"
      loop_control:
        label: "Modifying SE group called {{ item.name }}"
      when:
        - aws.serviceEngineGroup is defined
        - aws.name is defined
      tags:
        - serviceEngineGroup